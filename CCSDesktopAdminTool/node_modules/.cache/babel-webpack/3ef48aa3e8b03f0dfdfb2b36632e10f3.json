{"ast":null,"code":"import _classCallCheck from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { ReplaySubject } from '../../ReplaySubject';\nvar DEFAULT_WEBSOCKET_CONFIG = {\n  url: '',\n  deserializer: function deserializer(e) {\n    return JSON.parse(e.data);\n  },\n  serializer: function serializer(value) {\n    return JSON.stringify(value);\n  }\n};\nvar WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT = 'WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }';\nexport var WebSocketSubject = /*#__PURE__*/function (_AnonymousSubject) {\n  _inherits(WebSocketSubject, _AnonymousSubject);\n\n  var _super = _createSuper(WebSocketSubject);\n\n  function WebSocketSubject(urlConfigOrSource, destination) {\n    var _this;\n\n    _classCallCheck(this, WebSocketSubject);\n\n    _this = _super.call(this);\n\n    if (urlConfigOrSource instanceof Observable) {\n      _this.destination = destination;\n      _this.source = urlConfigOrSource;\n    } else {\n      var config = _this._config = Object.assign({}, DEFAULT_WEBSOCKET_CONFIG);\n      _this._output = new Subject();\n\n      if (typeof urlConfigOrSource === 'string') {\n        config.url = urlConfigOrSource;\n      } else {\n        for (var key in urlConfigOrSource) {\n          if (urlConfigOrSource.hasOwnProperty(key)) {\n            config[key] = urlConfigOrSource[key];\n          }\n        }\n      }\n\n      if (!config.WebSocketCtor && WebSocket) {\n        config.WebSocketCtor = WebSocket;\n      } else if (!config.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n\n      _this.destination = new ReplaySubject();\n    }\n\n    return _this;\n  }\n\n  _createClass(WebSocketSubject, [{\n    key: \"lift\",\n    value: function lift(operator) {\n      var sock = new WebSocketSubject(this._config, this.destination);\n      sock.operator = operator;\n      sock.source = this;\n      return sock;\n    }\n  }, {\n    key: \"_resetState\",\n    value: function _resetState() {\n      this._socket = null;\n\n      if (!this.source) {\n        this.destination = new ReplaySubject();\n      }\n\n      this._output = new Subject();\n    }\n  }, {\n    key: \"multiplex\",\n    value: function multiplex(subMsg, unsubMsg, messageFilter) {\n      var self = this;\n      return new Observable(function (observer) {\n        try {\n          self.next(subMsg());\n        } catch (err) {\n          observer.error(err);\n        }\n\n        var subscription = self.subscribe(function (x) {\n          try {\n            if (messageFilter(x)) {\n              observer.next(x);\n            }\n          } catch (err) {\n            observer.error(err);\n          }\n        }, function (err) {\n          return observer.error(err);\n        }, function () {\n          return observer.complete();\n        });\n        return function () {\n          try {\n            self.next(unsubMsg());\n          } catch (err) {\n            observer.error(err);\n          }\n\n          subscription.unsubscribe();\n        };\n      });\n    }\n  }, {\n    key: \"_connectSocket\",\n    value: function _connectSocket() {\n      var _this2 = this;\n\n      var _this$_config = this._config,\n          WebSocketCtor = _this$_config.WebSocketCtor,\n          protocol = _this$_config.protocol,\n          url = _this$_config.url,\n          binaryType = _this$_config.binaryType;\n      var observer = this._output;\n      var socket = null;\n\n      try {\n        socket = protocol ? new WebSocketCtor(url, protocol) : new WebSocketCtor(url);\n        this._socket = socket;\n\n        if (binaryType) {\n          this._socket.binaryType = binaryType;\n        }\n      } catch (e) {\n        observer.error(e);\n        return;\n      }\n\n      var subscription = new Subscription(function () {\n        _this2._socket = null;\n\n        if (socket && socket.readyState === 1) {\n          socket.close();\n        }\n      });\n\n      socket.onopen = function (e) {\n        var _socket = _this2._socket;\n\n        if (!_socket) {\n          socket.close();\n\n          _this2._resetState();\n\n          return;\n        }\n\n        var openObserver = _this2._config.openObserver;\n\n        if (openObserver) {\n          openObserver.next(e);\n        }\n\n        var queue = _this2.destination;\n        _this2.destination = Subscriber.create(function (x) {\n          if (socket.readyState === 1) {\n            try {\n              var serializer = _this2._config.serializer;\n              socket.send(serializer(x));\n            } catch (e) {\n              _this2.destination.error(e);\n            }\n          }\n        }, function (e) {\n          var closingObserver = _this2._config.closingObserver;\n\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));\n          }\n\n          _this2._resetState();\n        }, function () {\n          var closingObserver = _this2._config.closingObserver;\n\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n\n          socket.close();\n\n          _this2._resetState();\n        });\n\n        if (queue && queue instanceof ReplaySubject) {\n          subscription.add(queue.subscribe(_this2.destination));\n        }\n      };\n\n      socket.onerror = function (e) {\n        _this2._resetState();\n\n        observer.error(e);\n      };\n\n      socket.onclose = function (e) {\n        _this2._resetState();\n\n        var closeObserver = _this2._config.closeObserver;\n\n        if (closeObserver) {\n          closeObserver.next(e);\n        }\n\n        if (e.wasClean) {\n          observer.complete();\n        } else {\n          observer.error(e);\n        }\n      };\n\n      socket.onmessage = function (e) {\n        try {\n          var deserializer = _this2._config.deserializer;\n          observer.next(deserializer(e));\n        } catch (err) {\n          observer.error(err);\n        }\n      };\n    }\n  }, {\n    key: \"_subscribe\",\n    value: function _subscribe(subscriber) {\n      var _this3 = this;\n\n      var source = this.source;\n\n      if (source) {\n        return source.subscribe(subscriber);\n      }\n\n      if (!this._socket) {\n        this._connectSocket();\n      }\n\n      this._output.subscribe(subscriber);\n\n      subscriber.add(function () {\n        var _socket = _this3._socket;\n\n        if (_this3._output.observers.length === 0) {\n          if (_socket && _socket.readyState === 1) {\n            _socket.close();\n          }\n\n          _this3._resetState();\n        }\n      });\n      return subscriber;\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var _socket = this._socket;\n\n      if (_socket && _socket.readyState === 1) {\n        _socket.close();\n      }\n\n      this._resetState();\n\n      _get(_getPrototypeOf(WebSocketSubject.prototype), \"unsubscribe\", this).call(this);\n    }\n  }]);\n\n  return WebSocketSubject;\n}(AnonymousSubject); //# sourceMappingURL=WebSocketSubject.js.map","map":null,"metadata":{},"sourceType":"module"}