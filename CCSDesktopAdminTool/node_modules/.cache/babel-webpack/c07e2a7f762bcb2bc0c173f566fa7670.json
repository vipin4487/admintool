{"ast":null,"code":"import _classCallCheck from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Directive, ElementRef, NgZone, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler, ConnectedOverlayScrollHandler } from 'primeng/dom';\nimport * as Éµngcc0 from '@angular/core';\n\nvar Tooltip = /*@__PURE__*/function () {\n  var Tooltip = /*#__PURE__*/function () {\n    function Tooltip(el, zone) {\n      _classCallCheck(this, Tooltip);\n\n      this.el = el;\n      this.zone = zone;\n      this.tooltipPosition = 'right';\n      this.tooltipEvent = 'hover';\n      this.appendTo = 'body';\n      this.tooltipZIndex = 'auto';\n      this.escape = true;\n    }\n\n    _createClass(Tooltip, [{\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled;\n      },\n      set: function set(val) {\n        this._disabled = val;\n        this.deactivate();\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this = this;\n\n        this.zone.runOutsideAngular(function () {\n          if (_this.tooltipEvent === 'hover') {\n            _this.mouseEnterListener = _this.onMouseEnter.bind(_this);\n            _this.mouseLeaveListener = _this.onMouseLeave.bind(_this);\n            _this.clickListener = _this.onClick.bind(_this);\n\n            _this.el.nativeElement.addEventListener('mouseenter', _this.mouseEnterListener);\n\n            _this.el.nativeElement.addEventListener('mouseleave', _this.mouseLeaveListener);\n\n            _this.el.nativeElement.addEventListener('click', _this.clickListener);\n          } else if (_this.tooltipEvent === 'focus') {\n            _this.focusListener = _this.onFocus.bind(_this);\n            _this.blurListener = _this.onBlur.bind(_this);\n\n            _this.el.nativeElement.addEventListener('focus', _this.focusListener);\n\n            _this.el.nativeElement.addEventListener('blur', _this.blurListener);\n          }\n        });\n      }\n    }, {\n      key: \"onMouseEnter\",\n      value: function onMouseEnter(e) {\n        if (!this.container && !this.showTimeout) {\n          this.activate();\n        }\n      }\n    }, {\n      key: \"onMouseLeave\",\n      value: function onMouseLeave(e) {\n        this.deactivate();\n      }\n    }, {\n      key: \"onFocus\",\n      value: function onFocus(e) {\n        this.activate();\n      }\n    }, {\n      key: \"onBlur\",\n      value: function onBlur(e) {\n        this.deactivate();\n      }\n    }, {\n      key: \"onClick\",\n      value: function onClick(e) {\n        this.deactivate();\n      }\n    }, {\n      key: \"activate\",\n      value: function activate() {\n        var _this2 = this;\n\n        this.active = true;\n        this.clearHideTimeout();\n        if (this.showDelay) this.showTimeout = setTimeout(function () {\n          _this2.show();\n        }, this.showDelay);else this.show();\n\n        if (this.life) {\n          var duration = this.showDelay ? this.life + this.showDelay : this.life;\n          this.hideTimeout = setTimeout(function () {\n            _this2.hide();\n          }, duration);\n        }\n      }\n    }, {\n      key: \"deactivate\",\n      value: function deactivate() {\n        var _this3 = this;\n\n        this.active = false;\n        this.clearShowTimeout();\n\n        if (this.hideDelay) {\n          this.clearHideTimeout(); //life timeout\n\n          this.hideTimeout = setTimeout(function () {\n            _this3.hide();\n          }, this.hideDelay);\n        } else {\n          this.hide();\n        }\n      }\n    }, {\n      key: \"text\",\n      get: function get() {\n        return this._text;\n      },\n      set: function set(text) {\n        this._text = text;\n\n        if (this.active) {\n          if (this._text) {\n            if (this.container && this.container.offsetParent) {\n              this.updateText();\n              this.align();\n            } else {\n              this.show();\n            }\n          } else {\n            this.hide();\n          }\n        }\n      }\n    }, {\n      key: \"create\",\n      value: function create() {\n        if (this.container) {\n          this.clearHideTimeout();\n          this.remove();\n        }\n\n        this.container = document.createElement('div');\n        var tooltipArrow = document.createElement('div');\n        tooltipArrow.className = 'p-tooltip-arrow';\n        this.container.appendChild(tooltipArrow);\n        this.tooltipText = document.createElement('div');\n        this.tooltipText.className = 'p-tooltip-text';\n        this.updateText();\n\n        if (this.positionStyle) {\n          this.container.style.position = this.positionStyle;\n        }\n\n        this.container.appendChild(this.tooltipText);\n        if (this.appendTo === 'body') document.body.appendChild(this.container);else if (this.appendTo === 'target') DomHandler.appendChild(this.container, this.el.nativeElement);else DomHandler.appendChild(this.container, this.appendTo);\n        this.container.style.display = 'inline-block';\n      }\n    }, {\n      key: \"show\",\n      value: function show() {\n        if (!this.text || this.disabled) {\n          return;\n        }\n\n        this.create();\n        this.align();\n        DomHandler.fadeIn(this.container, 250);\n        if (this.tooltipZIndex === 'auto') this.container.style.zIndex = ++DomHandler.zindex;else this.container.style.zIndex = this.tooltipZIndex;\n        this.bindDocumentResizeListener();\n        this.bindScrollListener();\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        this.remove();\n      }\n    }, {\n      key: \"updateText\",\n      value: function updateText() {\n        if (this.escape) {\n          this.tooltipText.innerHTML = '';\n          this.tooltipText.appendChild(document.createTextNode(this._text));\n        } else {\n          this.tooltipText.innerHTML = this._text;\n        }\n      }\n    }, {\n      key: \"align\",\n      value: function align() {\n        var position = this.tooltipPosition;\n\n        switch (position) {\n          case 'top':\n            this.alignTop();\n\n            if (this.isOutOfBounds()) {\n              this.alignBottom();\n\n              if (this.isOutOfBounds()) {\n                this.alignRight();\n\n                if (this.isOutOfBounds()) {\n                  this.alignLeft();\n                }\n              }\n            }\n\n            break;\n\n          case 'bottom':\n            this.alignBottom();\n\n            if (this.isOutOfBounds()) {\n              this.alignTop();\n\n              if (this.isOutOfBounds()) {\n                this.alignRight();\n\n                if (this.isOutOfBounds()) {\n                  this.alignLeft();\n                }\n              }\n            }\n\n            break;\n\n          case 'left':\n            this.alignLeft();\n\n            if (this.isOutOfBounds()) {\n              this.alignRight();\n\n              if (this.isOutOfBounds()) {\n                this.alignTop();\n\n                if (this.isOutOfBounds()) {\n                  this.alignBottom();\n                }\n              }\n            }\n\n            break;\n\n          case 'right':\n            this.alignRight();\n\n            if (this.isOutOfBounds()) {\n              this.alignLeft();\n\n              if (this.isOutOfBounds()) {\n                this.alignTop();\n\n                if (this.isOutOfBounds()) {\n                  this.alignBottom();\n                }\n              }\n            }\n\n            break;\n        }\n      }\n    }, {\n      key: \"getHostOffset\",\n      value: function getHostOffset() {\n        if (this.appendTo === 'body' || this.appendTo === 'target') {\n          var offset = this.el.nativeElement.getBoundingClientRect();\n          var targetLeft = offset.left + DomHandler.getWindowScrollLeft();\n          var targetTop = offset.top + DomHandler.getWindowScrollTop();\n          return {\n            left: targetLeft,\n            top: targetTop\n          };\n        } else {\n          return {\n            left: 0,\n            top: 0\n          };\n        }\n      }\n    }, {\n      key: \"alignRight\",\n      value: function alignRight() {\n        this.preAlign('right');\n        var hostOffset = this.getHostOffset();\n        var left = hostOffset.left + DomHandler.getOuterWidth(this.el.nativeElement);\n        var top = hostOffset.top + (DomHandler.getOuterHeight(this.el.nativeElement) - DomHandler.getOuterHeight(this.container)) / 2;\n        this.container.style.left = left + 'px';\n        this.container.style.top = top + 'px';\n      }\n    }, {\n      key: \"alignLeft\",\n      value: function alignLeft() {\n        this.preAlign('left');\n        var hostOffset = this.getHostOffset();\n        var left = hostOffset.left - DomHandler.getOuterWidth(this.container);\n        var top = hostOffset.top + (DomHandler.getOuterHeight(this.el.nativeElement) - DomHandler.getOuterHeight(this.container)) / 2;\n        this.container.style.left = left + 'px';\n        this.container.style.top = top + 'px';\n      }\n    }, {\n      key: \"alignTop\",\n      value: function alignTop() {\n        this.preAlign('top');\n        var hostOffset = this.getHostOffset();\n        var left = hostOffset.left + (DomHandler.getOuterWidth(this.el.nativeElement) - DomHandler.getOuterWidth(this.container)) / 2;\n        var top = hostOffset.top - DomHandler.getOuterHeight(this.container);\n        this.container.style.left = left + 'px';\n        this.container.style.top = top + 'px';\n      }\n    }, {\n      key: \"alignBottom\",\n      value: function alignBottom() {\n        this.preAlign('bottom');\n        var hostOffset = this.getHostOffset();\n        var left = hostOffset.left + (DomHandler.getOuterWidth(this.el.nativeElement) - DomHandler.getOuterWidth(this.container)) / 2;\n        var top = hostOffset.top + DomHandler.getOuterHeight(this.el.nativeElement);\n        this.container.style.left = left + 'px';\n        this.container.style.top = top + 'px';\n      }\n    }, {\n      key: \"preAlign\",\n      value: function preAlign(position) {\n        this.container.style.left = -999 + 'px';\n        this.container.style.top = -999 + 'px';\n        var defaultClassName = 'p-tooltip p-component p-tooltip-' + position;\n        this.container.className = this.tooltipStyleClass ? defaultClassName + ' ' + this.tooltipStyleClass : defaultClassName;\n      }\n    }, {\n      key: \"isOutOfBounds\",\n      value: function isOutOfBounds() {\n        var offset = this.container.getBoundingClientRect();\n        var targetTop = offset.top;\n        var targetLeft = offset.left;\n        var width = DomHandler.getOuterWidth(this.container);\n        var height = DomHandler.getOuterHeight(this.container);\n        var viewport = DomHandler.getViewport();\n        return targetLeft + width > viewport.width || targetLeft < 0 || targetTop < 0 || targetTop + height > viewport.height;\n      }\n    }, {\n      key: \"onWindowResize\",\n      value: function onWindowResize(e) {\n        this.hide();\n      }\n    }, {\n      key: \"bindDocumentResizeListener\",\n      value: function bindDocumentResizeListener() {\n        var _this4 = this;\n\n        this.zone.runOutsideAngular(function () {\n          _this4.resizeListener = _this4.onWindowResize.bind(_this4);\n          window.addEventListener('resize', _this4.resizeListener);\n        });\n      }\n    }, {\n      key: \"unbindDocumentResizeListener\",\n      value: function unbindDocumentResizeListener() {\n        if (this.resizeListener) {\n          window.removeEventListener('resize', this.resizeListener);\n          this.resizeListener = null;\n        }\n      }\n    }, {\n      key: \"bindScrollListener\",\n      value: function bindScrollListener() {\n        var _this5 = this;\n\n        if (!this.scrollHandler) {\n          this.scrollHandler = new ConnectedOverlayScrollHandler(this.el.nativeElement, function () {\n            if (_this5.container) {\n              _this5.hide();\n            }\n          });\n        }\n\n        this.scrollHandler.bindScrollListener();\n      }\n    }, {\n      key: \"unbindScrollListener\",\n      value: function unbindScrollListener() {\n        if (this.scrollHandler) {\n          this.scrollHandler.unbindScrollListener();\n        }\n      }\n    }, {\n      key: \"unbindEvents\",\n      value: function unbindEvents() {\n        if (this.tooltipEvent === 'hover') {\n          this.el.nativeElement.removeEventListener('mouseenter', this.mouseEnterListener);\n          this.el.nativeElement.removeEventListener('mouseleave', this.mouseLeaveListener);\n          this.el.nativeElement.removeEventListener('click', this.clickListener);\n        } else if (this.tooltipEvent === 'focus') {\n          this.el.nativeElement.removeEventListener('focus', this.focusListener);\n          this.el.nativeElement.removeEventListener('blur', this.blurListener);\n        }\n\n        this.unbindDocumentResizeListener();\n      }\n    }, {\n      key: \"remove\",\n      value: function remove() {\n        if (this.container && this.container.parentElement) {\n          if (this.appendTo === 'body') document.body.removeChild(this.container);else if (this.appendTo === 'target') this.el.nativeElement.removeChild(this.container);else DomHandler.removeChild(this.container, this.appendTo);\n        }\n\n        this.unbindDocumentResizeListener();\n        this.unbindScrollListener();\n        this.clearTimeouts();\n        this.container = null;\n        this.scrollHandler = null;\n      }\n    }, {\n      key: \"clearShowTimeout\",\n      value: function clearShowTimeout() {\n        if (this.showTimeout) {\n          clearTimeout(this.showTimeout);\n          this.showTimeout = null;\n        }\n      }\n    }, {\n      key: \"clearHideTimeout\",\n      value: function clearHideTimeout() {\n        if (this.hideTimeout) {\n          clearTimeout(this.hideTimeout);\n          this.hideTimeout = null;\n        }\n      }\n    }, {\n      key: \"clearTimeouts\",\n      value: function clearTimeouts() {\n        this.clearShowTimeout();\n        this.clearHideTimeout();\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.unbindEvents();\n        this.remove();\n\n        if (this.scrollHandler) {\n          this.scrollHandler.destroy();\n          this.scrollHandler = null;\n        }\n      }\n    }]);\n\n    return Tooltip;\n  }();\n\n  Tooltip.Éµfac = function Tooltip_Factory(t) {\n    return new (t || Tooltip)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone));\n  };\n\n  Tooltip.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: Tooltip,\n    selectors: [[\"\", \"pTooltip\", \"\"]],\n    inputs: {\n      tooltipPosition: \"tooltipPosition\",\n      tooltipEvent: \"tooltipEvent\",\n      appendTo: \"appendTo\",\n      tooltipZIndex: \"tooltipZIndex\",\n      escape: \"escape\",\n      disabled: [\"tooltipDisabled\", \"disabled\"],\n      text: [\"pTooltip\", \"text\"],\n      positionStyle: \"positionStyle\",\n      tooltipStyleClass: \"tooltipStyleClass\",\n      showDelay: \"showDelay\",\n      hideDelay: \"hideDelay\",\n      life: \"life\"\n    }\n  });\n  return Tooltip;\n}();\n\nvar TooltipModule = /*@__PURE__*/function () {\n  var TooltipModule = /*#__PURE__*/_createClass(function TooltipModule() {\n    _classCallCheck(this, TooltipModule);\n  });\n\n  TooltipModule.Éµfac = function TooltipModule_Factory(t) {\n    return new (t || TooltipModule)();\n  };\n\n  TooltipModule.Éµmod = /*@__PURE__*/Éµngcc0.ÉµÉµdefineNgModule({\n    type: TooltipModule\n  });\n  TooltipModule.Éµinj = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return TooltipModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(TooltipModule, {\n    declarations: function declarations() {\n      return [Tooltip];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [Tooltip];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Tooltip, TooltipModule }; //# sourceMappingURL=primeng-tooltip.js.map","map":null,"metadata":{},"sourceType":"module"}