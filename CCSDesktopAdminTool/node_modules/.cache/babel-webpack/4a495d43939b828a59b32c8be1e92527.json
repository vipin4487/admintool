{"ast":null,"code":"import _classCallCheck from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nexport var ColdObservable = /*#__PURE__*/function (_Observable) {\n  _inherits(ColdObservable, _Observable);\n\n  var _super = _createSuper(ColdObservable);\n\n  function ColdObservable(messages, scheduler) {\n    var _this;\n\n    _classCallCheck(this, ColdObservable);\n\n    _this = _super.call(this, function (subscriber) {\n      var observable = this;\n      var index = observable.logSubscribedFrame();\n      var subscription = new Subscription();\n      subscription.add(new Subscription(function () {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscription;\n    });\n    _this.messages = messages;\n    _this.subscriptions = [];\n    _this.scheduler = scheduler;\n    return _this;\n  }\n\n  _createClass(ColdObservable, [{\n    key: \"scheduleMessages\",\n    value: function scheduleMessages(subscriber) {\n      var messagesLength = this.messages.length;\n\n      for (var i = 0; i < messagesLength; i++) {\n        var message = this.messages[i];\n        subscriber.add(this.scheduler.schedule(function (_ref) {\n          var message = _ref.message,\n              subscriber = _ref.subscriber;\n          message.notification.observe(subscriber);\n        }, message.frame, {\n          message: message,\n          subscriber: subscriber\n        }));\n      }\n    }\n  }]);\n\n  return ColdObservable;\n}(Observable);\napplyMixins(ColdObservable, [SubscriptionLoggable]);","map":{"version":3,"sources":["C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/rxjs/_esm2015/internal/testing/ColdObservable.js"],"names":["Observable","Subscription","SubscriptionLoggable","applyMixins","ColdObservable","messages","scheduler","subscriber","observable","index","logSubscribedFrame","subscription","add","logUnsubscribedFrame","scheduleMessages","subscriptions","messagesLength","length","i","message","schedule","notification","observe","frame"],"mappings":";;;;AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,oBAAT,QAAqC,wBAArC;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,WAAaC,cAAb;AAAA;;AAAA;;AACI,0BAAYC,QAAZ,EAAsBC,SAAtB,EAAiC;AAAA;;AAAA;;AAC7B,8BAAM,UAAUC,UAAV,EAAsB;AACxB,UAAMC,UAAU,GAAG,IAAnB;AACA,UAAMC,KAAK,GAAGD,UAAU,CAACE,kBAAX,EAAd;AACA,UAAMC,YAAY,GAAG,IAAIV,YAAJ,EAArB;AACAU,MAAAA,YAAY,CAACC,GAAb,CAAiB,IAAIX,YAAJ,CAAiB,YAAM;AACpCO,QAAAA,UAAU,CAACK,oBAAX,CAAgCJ,KAAhC;AACH,OAFgB,CAAjB;AAGAD,MAAAA,UAAU,CAACM,gBAAX,CAA4BP,UAA5B;AACA,aAAOI,YAAP;AACH,KATD;AAUA,UAAKN,QAAL,GAAgBA,QAAhB;AACA,UAAKU,aAAL,GAAqB,EAArB;AACA,UAAKT,SAAL,GAAiBA,SAAjB;AAb6B;AAchC;;AAfL;AAAA;AAAA,WAgBI,0BAAiBC,UAAjB,EAA6B;AACzB,UAAMS,cAAc,GAAG,KAAKX,QAAL,CAAcY,MAArC;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,cAApB,EAAoCE,CAAC,EAArC,EAAyC;AACrC,YAAMC,OAAO,GAAG,KAAKd,QAAL,CAAca,CAAd,CAAhB;AACAX,QAAAA,UAAU,CAACK,GAAX,CAAe,KAAKN,SAAL,CAAec,QAAf,CAAwB,gBAA6B;AAAA,cAA1BD,OAA0B,QAA1BA,OAA0B;AAAA,cAAjBZ,UAAiB,QAAjBA,UAAiB;AAAEY,UAAAA,OAAO,CAACE,YAAR,CAAqBC,OAArB,CAA6Bf,UAA7B;AAA2C,SAAlG,EAAoGY,OAAO,CAACI,KAA5G,EAAmH;AAAEJ,UAAAA,OAAO,EAAPA,OAAF;AAAWZ,UAAAA,UAAU,EAAVA;AAAX,SAAnH,CAAf;AACH;AACJ;AAtBL;;AAAA;AAAA,EAAoCP,UAApC;AAwBAG,WAAW,CAACC,cAAD,EAAiB,CAACF,oBAAD,CAAjB,CAAX","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nexport class ColdObservable extends Observable {\n    constructor(messages, scheduler) {\n        super(function (subscriber) {\n            const observable = this;\n            const index = observable.logSubscribedFrame();\n            const subscription = new Subscription();\n            subscription.add(new Subscription(() => {\n                observable.logUnsubscribedFrame(index);\n            }));\n            observable.scheduleMessages(subscriber);\n            return subscription;\n        });\n        this.messages = messages;\n        this.subscriptions = [];\n        this.scheduler = scheduler;\n    }\n    scheduleMessages(subscriber) {\n        const messagesLength = this.messages.length;\n        for (let i = 0; i < messagesLength; i++) {\n            const message = this.messages[i];\n            subscriber.add(this.scheduler.schedule(({ message, subscriber }) => { message.notification.observe(subscriber); }, message.frame, { message, subscriber }));\n        }\n    }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n"]},"metadata":{},"sourceType":"module"}