{"ast":null,"code":"import _classCallCheck from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { ReplaySubject } from '../../ReplaySubject';\nvar DEFAULT_WEBSOCKET_CONFIG = {\n  url: '',\n  deserializer: function deserializer(e) {\n    return JSON.parse(e.data);\n  },\n  serializer: function serializer(value) {\n    return JSON.stringify(value);\n  }\n};\nvar WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT = 'WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }';\nexport var WebSocketSubject = /*#__PURE__*/function (_AnonymousSubject) {\n  _inherits(WebSocketSubject, _AnonymousSubject);\n\n  var _super = _createSuper(WebSocketSubject);\n\n  function WebSocketSubject(urlConfigOrSource, destination) {\n    var _this;\n\n    _classCallCheck(this, WebSocketSubject);\n\n    _this = _super.call(this);\n\n    if (urlConfigOrSource instanceof Observable) {\n      _this.destination = destination;\n      _this.source = urlConfigOrSource;\n    } else {\n      var config = _this._config = Object.assign({}, DEFAULT_WEBSOCKET_CONFIG);\n      _this._output = new Subject();\n\n      if (typeof urlConfigOrSource === 'string') {\n        config.url = urlConfigOrSource;\n      } else {\n        for (var key in urlConfigOrSource) {\n          if (urlConfigOrSource.hasOwnProperty(key)) {\n            config[key] = urlConfigOrSource[key];\n          }\n        }\n      }\n\n      if (!config.WebSocketCtor && WebSocket) {\n        config.WebSocketCtor = WebSocket;\n      } else if (!config.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n\n      _this.destination = new ReplaySubject();\n    }\n\n    return _this;\n  }\n\n  _createClass(WebSocketSubject, [{\n    key: \"lift\",\n    value: function lift(operator) {\n      var sock = new WebSocketSubject(this._config, this.destination);\n      sock.operator = operator;\n      sock.source = this;\n      return sock;\n    }\n  }, {\n    key: \"_resetState\",\n    value: function _resetState() {\n      this._socket = null;\n\n      if (!this.source) {\n        this.destination = new ReplaySubject();\n      }\n\n      this._output = new Subject();\n    }\n  }, {\n    key: \"multiplex\",\n    value: function multiplex(subMsg, unsubMsg, messageFilter) {\n      var self = this;\n      return new Observable(function (observer) {\n        try {\n          self.next(subMsg());\n        } catch (err) {\n          observer.error(err);\n        }\n\n        var subscription = self.subscribe(function (x) {\n          try {\n            if (messageFilter(x)) {\n              observer.next(x);\n            }\n          } catch (err) {\n            observer.error(err);\n          }\n        }, function (err) {\n          return observer.error(err);\n        }, function () {\n          return observer.complete();\n        });\n        return function () {\n          try {\n            self.next(unsubMsg());\n          } catch (err) {\n            observer.error(err);\n          }\n\n          subscription.unsubscribe();\n        };\n      });\n    }\n  }, {\n    key: \"_connectSocket\",\n    value: function _connectSocket() {\n      var _this2 = this;\n\n      var _this$_config = this._config,\n          WebSocketCtor = _this$_config.WebSocketCtor,\n          protocol = _this$_config.protocol,\n          url = _this$_config.url,\n          binaryType = _this$_config.binaryType;\n      var observer = this._output;\n      var socket = null;\n\n      try {\n        socket = protocol ? new WebSocketCtor(url, protocol) : new WebSocketCtor(url);\n        this._socket = socket;\n\n        if (binaryType) {\n          this._socket.binaryType = binaryType;\n        }\n      } catch (e) {\n        observer.error(e);\n        return;\n      }\n\n      var subscription = new Subscription(function () {\n        _this2._socket = null;\n\n        if (socket && socket.readyState === 1) {\n          socket.close();\n        }\n      });\n\n      socket.onopen = function (e) {\n        var _socket = _this2._socket;\n\n        if (!_socket) {\n          socket.close();\n\n          _this2._resetState();\n\n          return;\n        }\n\n        var openObserver = _this2._config.openObserver;\n\n        if (openObserver) {\n          openObserver.next(e);\n        }\n\n        var queue = _this2.destination;\n        _this2.destination = Subscriber.create(function (x) {\n          if (socket.readyState === 1) {\n            try {\n              var serializer = _this2._config.serializer;\n              socket.send(serializer(x));\n            } catch (e) {\n              _this2.destination.error(e);\n            }\n          }\n        }, function (e) {\n          var closingObserver = _this2._config.closingObserver;\n\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));\n          }\n\n          _this2._resetState();\n        }, function () {\n          var closingObserver = _this2._config.closingObserver;\n\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n\n          socket.close();\n\n          _this2._resetState();\n        });\n\n        if (queue && queue instanceof ReplaySubject) {\n          subscription.add(queue.subscribe(_this2.destination));\n        }\n      };\n\n      socket.onerror = function (e) {\n        _this2._resetState();\n\n        observer.error(e);\n      };\n\n      socket.onclose = function (e) {\n        _this2._resetState();\n\n        var closeObserver = _this2._config.closeObserver;\n\n        if (closeObserver) {\n          closeObserver.next(e);\n        }\n\n        if (e.wasClean) {\n          observer.complete();\n        } else {\n          observer.error(e);\n        }\n      };\n\n      socket.onmessage = function (e) {\n        try {\n          var deserializer = _this2._config.deserializer;\n          observer.next(deserializer(e));\n        } catch (err) {\n          observer.error(err);\n        }\n      };\n    }\n  }, {\n    key: \"_subscribe\",\n    value: function _subscribe(subscriber) {\n      var _this3 = this;\n\n      var source = this.source;\n\n      if (source) {\n        return source.subscribe(subscriber);\n      }\n\n      if (!this._socket) {\n        this._connectSocket();\n      }\n\n      this._output.subscribe(subscriber);\n\n      subscriber.add(function () {\n        var _socket = _this3._socket;\n\n        if (_this3._output.observers.length === 0) {\n          if (_socket && _socket.readyState === 1) {\n            _socket.close();\n          }\n\n          _this3._resetState();\n        }\n      });\n      return subscriber;\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var _socket = this._socket;\n\n      if (_socket && _socket.readyState === 1) {\n        _socket.close();\n      }\n\n      this._resetState();\n\n      _get(_getPrototypeOf(WebSocketSubject.prototype), \"unsubscribe\", this).call(this);\n    }\n  }]);\n\n  return WebSocketSubject;\n}(AnonymousSubject);","map":{"version":3,"sources":["C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/rxjs/_esm2015/internal/observable/dom/WebSocketSubject.js"],"names":["Subject","AnonymousSubject","Subscriber","Observable","Subscription","ReplaySubject","DEFAULT_WEBSOCKET_CONFIG","url","deserializer","e","JSON","parse","data","serializer","value","stringify","WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT","WebSocketSubject","urlConfigOrSource","destination","source","config","_config","Object","assign","_output","key","hasOwnProperty","WebSocketCtor","WebSocket","Error","operator","sock","_socket","subMsg","unsubMsg","messageFilter","self","observer","next","err","error","subscription","subscribe","x","complete","unsubscribe","protocol","binaryType","socket","readyState","close","onopen","_resetState","openObserver","queue","create","send","closingObserver","undefined","code","reason","TypeError","add","onerror","onclose","closeObserver","wasClean","onmessage","subscriber","_connectSocket","observers","length"],"mappings":"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","sourcesContent":["import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { ReplaySubject } from '../../ReplaySubject';\nconst DEFAULT_WEBSOCKET_CONFIG = {\n    url: '',\n    deserializer: (e) => JSON.parse(e.data),\n    serializer: (value) => JSON.stringify(value),\n};\nconst WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT = 'WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }';\nexport class WebSocketSubject extends AnonymousSubject {\n    constructor(urlConfigOrSource, destination) {\n        super();\n        if (urlConfigOrSource instanceof Observable) {\n            this.destination = destination;\n            this.source = urlConfigOrSource;\n        }\n        else {\n            const config = this._config = Object.assign({}, DEFAULT_WEBSOCKET_CONFIG);\n            this._output = new Subject();\n            if (typeof urlConfigOrSource === 'string') {\n                config.url = urlConfigOrSource;\n            }\n            else {\n                for (let key in urlConfigOrSource) {\n                    if (urlConfigOrSource.hasOwnProperty(key)) {\n                        config[key] = urlConfigOrSource[key];\n                    }\n                }\n            }\n            if (!config.WebSocketCtor && WebSocket) {\n                config.WebSocketCtor = WebSocket;\n            }\n            else if (!config.WebSocketCtor) {\n                throw new Error('no WebSocket constructor can be found');\n            }\n            this.destination = new ReplaySubject();\n        }\n    }\n    lift(operator) {\n        const sock = new WebSocketSubject(this._config, this.destination);\n        sock.operator = operator;\n        sock.source = this;\n        return sock;\n    }\n    _resetState() {\n        this._socket = null;\n        if (!this.source) {\n            this.destination = new ReplaySubject();\n        }\n        this._output = new Subject();\n    }\n    multiplex(subMsg, unsubMsg, messageFilter) {\n        const self = this;\n        return new Observable((observer) => {\n            try {\n                self.next(subMsg());\n            }\n            catch (err) {\n                observer.error(err);\n            }\n            const subscription = self.subscribe(x => {\n                try {\n                    if (messageFilter(x)) {\n                        observer.next(x);\n                    }\n                }\n                catch (err) {\n                    observer.error(err);\n                }\n            }, err => observer.error(err), () => observer.complete());\n            return () => {\n                try {\n                    self.next(unsubMsg());\n                }\n                catch (err) {\n                    observer.error(err);\n                }\n                subscription.unsubscribe();\n            };\n        });\n    }\n    _connectSocket() {\n        const { WebSocketCtor, protocol, url, binaryType } = this._config;\n        const observer = this._output;\n        let socket = null;\n        try {\n            socket = protocol ?\n                new WebSocketCtor(url, protocol) :\n                new WebSocketCtor(url);\n            this._socket = socket;\n            if (binaryType) {\n                this._socket.binaryType = binaryType;\n            }\n        }\n        catch (e) {\n            observer.error(e);\n            return;\n        }\n        const subscription = new Subscription(() => {\n            this._socket = null;\n            if (socket && socket.readyState === 1) {\n                socket.close();\n            }\n        });\n        socket.onopen = (e) => {\n            const { _socket } = this;\n            if (!_socket) {\n                socket.close();\n                this._resetState();\n                return;\n            }\n            const { openObserver } = this._config;\n            if (openObserver) {\n                openObserver.next(e);\n            }\n            const queue = this.destination;\n            this.destination = Subscriber.create((x) => {\n                if (socket.readyState === 1) {\n                    try {\n                        const { serializer } = this._config;\n                        socket.send(serializer(x));\n                    }\n                    catch (e) {\n                        this.destination.error(e);\n                    }\n                }\n            }, (e) => {\n                const { closingObserver } = this._config;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                if (e && e.code) {\n                    socket.close(e.code, e.reason);\n                }\n                else {\n                    observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));\n                }\n                this._resetState();\n            }, () => {\n                const { closingObserver } = this._config;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                socket.close();\n                this._resetState();\n            });\n            if (queue && queue instanceof ReplaySubject) {\n                subscription.add(queue.subscribe(this.destination));\n            }\n        };\n        socket.onerror = (e) => {\n            this._resetState();\n            observer.error(e);\n        };\n        socket.onclose = (e) => {\n            this._resetState();\n            const { closeObserver } = this._config;\n            if (closeObserver) {\n                closeObserver.next(e);\n            }\n            if (e.wasClean) {\n                observer.complete();\n            }\n            else {\n                observer.error(e);\n            }\n        };\n        socket.onmessage = (e) => {\n            try {\n                const { deserializer } = this._config;\n                observer.next(deserializer(e));\n            }\n            catch (err) {\n                observer.error(err);\n            }\n        };\n    }\n    _subscribe(subscriber) {\n        const { source } = this;\n        if (source) {\n            return source.subscribe(subscriber);\n        }\n        if (!this._socket) {\n            this._connectSocket();\n        }\n        this._output.subscribe(subscriber);\n        subscriber.add(() => {\n            const { _socket } = this;\n            if (this._output.observers.length === 0) {\n                if (_socket && _socket.readyState === 1) {\n                    _socket.close();\n                }\n                this._resetState();\n            }\n        });\n        return subscriber;\n    }\n    unsubscribe() {\n        const { _socket } = this;\n        if (_socket && _socket.readyState === 1) {\n            _socket.close();\n        }\n        this._resetState();\n        super.unsubscribe();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}