{"ast":null,"code":"import _toConsumableArray from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, ChangeDetectorRef, Input, ViewChild, Output, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { ButtonModule } from 'primeng/button';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from 'primeng/inputtext';\nimport * as ɵngcc3 from 'primeng/button';\nvar _c0 = [\"input\"];\n\nvar _c1 = function _c1() {\n  return {\n    \"p-inputnumber-button p-inputnumber-button-up\": true\n  };\n};\n\nvar _c2 = function _c2() {\n  return {\n    \"p-inputnumber-button p-inputnumber-button-down\": true\n  };\n};\n\nfunction InputNumber_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"span\", 5);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 6);\n    ɵngcc0.ɵɵlistener(\"mousedown\", function InputNumber_span_3_Template_button_mousedown_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.onUpButtonMouseDown($event);\n    })(\"mouseup\", function InputNumber_span_3_Template_button_mouseup_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ctx_r6.onUpButtonMouseUp();\n    })(\"mouseleave\", function InputNumber_span_3_Template_button_mouseleave_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ctx_r7.onUpButtonMouseLeave();\n    })(\"keydown\", function InputNumber_span_3_Template_button_keydown_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ctx_r8.onUpButtonKeyDown($event);\n    })(\"keyup\", function InputNumber_span_3_Template_button_keyup_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r9 = ɵngcc0.ɵɵnextContext();\n      return ctx_r9.onUpButtonKeyUp();\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(2, \"button\", 6);\n    ɵngcc0.ɵɵlistener(\"mousedown\", function InputNumber_span_3_Template_button_mousedown_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10.onDownButtonMouseDown($event);\n    })(\"mouseup\", function InputNumber_span_3_Template_button_mouseup_2_listener() {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.onDownButtonMouseUp();\n    })(\"mouseleave\", function InputNumber_span_3_Template_button_mouseleave_2_listener() {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.onDownButtonMouseLeave();\n    })(\"keydown\", function InputNumber_span_3_Template_button_keydown_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r13 = ɵngcc0.ɵɵnextContext();\n      return ctx_r13.onDownButtonKeyDown($event);\n    })(\"keyup\", function InputNumber_span_3_Template_button_keyup_2_listener() {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r14 = ɵngcc0.ɵɵnextContext();\n      return ctx_r14.onDownButtonKeyUp();\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMap(ctx_r1.incrementButtonClass);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction0(10, _c1))(\"icon\", ctx_r1.incrementButtonIcon)(\"disabled\", ctx_r1.disabled);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMap(ctx_r1.decrementButtonClass);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction0(11, _c2))(\"icon\", ctx_r1.decrementButtonIcon)(\"disabled\", ctx_r1.disabled);\n  }\n}\n\nfunction InputNumber_button_4_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r16 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 6);\n    ɵngcc0.ɵɵlistener(\"mousedown\", function InputNumber_button_4_Template_button_mousedown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r16);\n      var ctx_r15 = ɵngcc0.ɵɵnextContext();\n      return ctx_r15.onUpButtonMouseDown($event);\n    })(\"mouseup\", function InputNumber_button_4_Template_button_mouseup_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r16);\n      var ctx_r17 = ɵngcc0.ɵɵnextContext();\n      return ctx_r17.onUpButtonMouseUp();\n    })(\"mouseleave\", function InputNumber_button_4_Template_button_mouseleave_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r16);\n      var ctx_r18 = ɵngcc0.ɵɵnextContext();\n      return ctx_r18.onUpButtonMouseLeave();\n    })(\"keydown\", function InputNumber_button_4_Template_button_keydown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r16);\n      var ctx_r19 = ɵngcc0.ɵɵnextContext();\n      return ctx_r19.onUpButtonKeyDown($event);\n    })(\"keyup\", function InputNumber_button_4_Template_button_keyup_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r16);\n      var ctx_r20 = ɵngcc0.ɵɵnextContext();\n      return ctx_r20.onUpButtonKeyUp();\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMap(ctx_r2.incrementButtonClass);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction0(5, _c1))(\"icon\", ctx_r2.incrementButtonIcon)(\"disabled\", ctx_r2.disabled);\n  }\n}\n\nfunction InputNumber_button_5_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r22 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 6);\n    ɵngcc0.ɵɵlistener(\"mousedown\", function InputNumber_button_5_Template_button_mousedown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r22);\n      var ctx_r21 = ɵngcc0.ɵɵnextContext();\n      return ctx_r21.onDownButtonMouseDown($event);\n    })(\"mouseup\", function InputNumber_button_5_Template_button_mouseup_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r22);\n      var ctx_r23 = ɵngcc0.ɵɵnextContext();\n      return ctx_r23.onDownButtonMouseUp();\n    })(\"mouseleave\", function InputNumber_button_5_Template_button_mouseleave_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r22);\n      var ctx_r24 = ɵngcc0.ɵɵnextContext();\n      return ctx_r24.onDownButtonMouseLeave();\n    })(\"keydown\", function InputNumber_button_5_Template_button_keydown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r22);\n      var ctx_r25 = ɵngcc0.ɵɵnextContext();\n      return ctx_r25.onDownButtonKeyDown($event);\n    })(\"keyup\", function InputNumber_button_5_Template_button_keyup_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r22);\n      var ctx_r26 = ɵngcc0.ɵɵnextContext();\n      return ctx_r26.onDownButtonKeyUp();\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMap(ctx_r3.decrementButtonClass);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction0(5, _c2))(\"icon\", ctx_r3.decrementButtonIcon)(\"disabled\", ctx_r3.disabled);\n  }\n}\n\nvar _c3 = function _c3(a1, a2, a3) {\n  return {\n    \"p-inputnumber p-component\": true,\n    \"p-inputnumber-buttons-stacked\": a1,\n    \"p-inputnumber-buttons-horizontal\": a2,\n    \"p-inputnumber-buttons-vertical\": a3\n  };\n};\n\nvar INPUTNUMBER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return InputNumber;\n  }),\n  multi: true\n};\n\nvar InputNumber = /*@__PURE__*/function () {\n  var InputNumber = /*#__PURE__*/function () {\n    function InputNumber(el, cd) {\n      _classCallCheck(this, InputNumber);\n\n      this.el = el;\n      this.cd = cd;\n      this.showButtons = false;\n      this.format = true;\n      this.buttonLayout = \"stacked\";\n      this.incrementButtonIcon = 'pi pi-angle-up';\n      this.decrementButtonIcon = 'pi pi-angle-down';\n      this.step = 1;\n      this.onInput = new EventEmitter();\n      this.onFocus = new EventEmitter();\n      this.onBlur = new EventEmitter();\n      this.onKeyDown = new EventEmitter();\n\n      this.onModelChange = function () {};\n\n      this.onModelTouched = function () {};\n\n      this.groupChar = '';\n      this.prefixChar = '';\n      this.suffixChar = '';\n      this._modeOption = \"decimal\";\n      this._useGroupingOption = true;\n    }\n\n    _createClass(InputNumber, [{\n      key: \"locale\",\n      get: function get() {\n        return this._localeOption;\n      },\n      set: function set(localeOption) {\n        this._localeOption = localeOption;\n        this.updateConstructParser();\n      }\n    }, {\n      key: \"localeMatcher\",\n      get: function get() {\n        return this._localeMatcherOption;\n      },\n      set: function set(localeMatcherOption) {\n        this._localeMatcherOption = localeMatcherOption;\n        this.updateConstructParser();\n      }\n    }, {\n      key: \"mode\",\n      get: function get() {\n        return this._modeOption;\n      },\n      set: function set(modeOption) {\n        this._modeOption = modeOption;\n        this.updateConstructParser();\n      }\n    }, {\n      key: \"currency\",\n      get: function get() {\n        return this._currencyOption;\n      },\n      set: function set(currencyOption) {\n        this._currencyOption = currencyOption;\n        this.updateConstructParser();\n      }\n    }, {\n      key: \"currencyDisplay\",\n      get: function get() {\n        return this._currencyDisplayOption;\n      },\n      set: function set(currencyDisplayOption) {\n        this._currencyDisplayOption = currencyDisplayOption;\n        this.updateConstructParser();\n      }\n    }, {\n      key: \"useGrouping\",\n      get: function get() {\n        return this._useGroupingOption;\n      },\n      set: function set(useGroupingOption) {\n        this._useGroupingOption = useGroupingOption;\n        this.updateConstructParser();\n      }\n    }, {\n      key: \"minFractionDigits\",\n      get: function get() {\n        return this._minFractionDigitsOption;\n      },\n      set: function set(minFractionDigitsOption) {\n        this._minFractionDigitsOption = minFractionDigitsOption;\n        this.updateConstructParser();\n      }\n    }, {\n      key: \"maxFractionDigits\",\n      get: function get() {\n        return this._maxFractionDigitsOption;\n      },\n      set: function set(maxFractionDigitsOption) {\n        this._maxFractionDigitsOption = maxFractionDigitsOption;\n        this.updateConstructParser();\n      }\n    }, {\n      key: \"prefix\",\n      get: function get() {\n        return this._prefixOption;\n      },\n      set: function set(prefixOption) {\n        this._prefixOption = prefixOption;\n        this.updateConstructParser();\n      }\n    }, {\n      key: \"suffix\",\n      get: function get() {\n        return this._suffixOption;\n      },\n      set: function set(suffixOption) {\n        this._suffixOption = suffixOption;\n        this.updateConstructParser();\n      }\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        return this._disabled;\n      },\n      set: function set(disabled) {\n        if (disabled) this.focused = false;\n        this._disabled = disabled;\n        if (this.timer) this.clearTimer();\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.constructParser();\n        this.initialized = true;\n      }\n    }, {\n      key: \"getOptions\",\n      value: function getOptions() {\n        return {\n          localeMatcher: this.localeMatcher,\n          style: this.mode,\n          currency: this.currency,\n          currencyDisplay: this.currencyDisplay,\n          useGrouping: this.useGrouping,\n          minimumFractionDigits: this.minFractionDigits,\n          maximumFractionDigits: this.maxFractionDigits\n        };\n      }\n    }, {\n      key: \"constructParser\",\n      value: function constructParser() {\n        this.numberFormat = new Intl.NumberFormat(this.locale, this.getOptions());\n\n        var numerals = _toConsumableArray(new Intl.NumberFormat(this.locale, {\n          useGrouping: false\n        }).format(9876543210)).reverse();\n\n        var index = new Map(numerals.map(function (d, i) {\n          return [d, i];\n        }));\n        this._numeral = new RegExp(\"[\".concat(numerals.join(''), \"]\"), 'g');\n        this._decimal = this.getDecimalExpression();\n        this._group = this.getGroupingExpression();\n        this._minusSign = this.getMinusSignExpression();\n        this._currency = this.getCurrencyExpression();\n        this._suffix = this.getSuffixExpression();\n        this._prefix = this.getPrefixExpression();\n\n        this._index = function (d) {\n          return index.get(d);\n        };\n      }\n    }, {\n      key: \"updateConstructParser\",\n      value: function updateConstructParser() {\n        if (this.initialized) {\n          this.constructParser();\n        }\n      }\n    }, {\n      key: \"escapeRegExp\",\n      value: function escapeRegExp(text) {\n        return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n      }\n    }, {\n      key: \"getDecimalExpression\",\n      value: function getDecimalExpression() {\n        var formatter = new Intl.NumberFormat(this.locale, {\n          useGrouping: false\n        });\n        return new RegExp(\"[\".concat(formatter.format(1.1).trim().replace(this._numeral, ''), \"]\"), 'g');\n      }\n    }, {\n      key: \"getGroupingExpression\",\n      value: function getGroupingExpression() {\n        var formatter = new Intl.NumberFormat(this.locale, {\n          useGrouping: true\n        });\n        this.groupChar = formatter.format(1000000).trim().replace(this._numeral, '').charAt(0);\n        return new RegExp(\"[\".concat(this.groupChar, \"]\"), 'g');\n      }\n    }, {\n      key: \"getMinusSignExpression\",\n      value: function getMinusSignExpression() {\n        var formatter = new Intl.NumberFormat(this.locale, {\n          useGrouping: false\n        });\n        return new RegExp(\"[\".concat(formatter.format(-1).trim().replace(this._numeral, ''), \"]\"), 'g');\n      }\n    }, {\n      key: \"getCurrencyExpression\",\n      value: function getCurrencyExpression() {\n        if (this.currency) {\n          var formatter = new Intl.NumberFormat(this.locale, {\n            style: 'currency',\n            currency: this.currency,\n            currencyDisplay: this.currencyDisplay\n          });\n          return new RegExp(\"[\".concat(formatter.format(1).replace(/\\s/g, '').replace(this._numeral, '').replace(this._decimal, '').replace(this._group, ''), \"]\"), 'g');\n        }\n\n        return new RegExp(\"[]\", 'g');\n      }\n    }, {\n      key: \"getPrefixExpression\",\n      value: function getPrefixExpression() {\n        if (this.prefix) {\n          this.prefixChar = this.prefix;\n        } else {\n          var formatter = new Intl.NumberFormat(this.locale, {\n            style: this.mode,\n            currency: this.currency,\n            currencyDisplay: this.currencyDisplay\n          });\n          this.prefixChar = formatter.format(1).split('1')[0];\n        }\n\n        return new RegExp(\"\".concat(this.escapeRegExp(this.prefixChar || '')), 'g');\n      }\n    }, {\n      key: \"getSuffixExpression\",\n      value: function getSuffixExpression() {\n        if (this.suffix) {\n          this.suffixChar = this.suffix;\n        } else {\n          var formatter = new Intl.NumberFormat(this.locale, {\n            style: this.mode,\n            currency: this.currency,\n            currencyDisplay: this.currencyDisplay,\n            minimumFractionDigits: 0,\n            maximumFractionDigits: 0\n          });\n          this.suffixChar = formatter.format(1).split('1')[1];\n        }\n\n        return new RegExp(\"\".concat(this.escapeRegExp(this.suffixChar || '')), 'g');\n      }\n    }, {\n      key: \"formatValue\",\n      value: function formatValue(value) {\n        if (value != null) {\n          if (value === '-') {\n            // Minus sign\n            return value;\n          }\n\n          if (this.format) {\n            var formatter = new Intl.NumberFormat(this.locale, this.getOptions());\n            var formattedValue = formatter.format(value);\n\n            if (this.prefix) {\n              formattedValue = this.prefix + formattedValue;\n            }\n\n            if (this.suffix) {\n              formattedValue = formattedValue + this.suffix;\n            }\n\n            return formattedValue;\n          }\n\n          return value.toString();\n        }\n\n        return '';\n      }\n    }, {\n      key: \"parseValue\",\n      value: function parseValue(text) {\n        var filteredText = text.replace(this._suffix, '').replace(this._prefix, '').trim().replace(/\\s/g, '').replace(this._currency, '').replace(this._group, '').replace(this._minusSign, '-').replace(this._decimal, '.').replace(this._numeral, this._index);\n\n        if (filteredText) {\n          if (filteredText === '-') // Minus sign\n            return filteredText;\n          var parsedValue = +filteredText;\n          return isNaN(parsedValue) ? null : parsedValue;\n        }\n\n        return null;\n      }\n    }, {\n      key: \"repeat\",\n      value: function repeat(event, interval, dir) {\n        var _this = this;\n\n        var i = interval || 500;\n        this.clearTimer();\n        this.timer = setTimeout(function () {\n          _this.repeat(event, 40, dir);\n        }, i);\n        this.spin(event, dir);\n      }\n    }, {\n      key: \"spin\",\n      value: function spin(event, dir) {\n        var step = this.step * dir;\n        var currentValue = this.parseValue(this.input.nativeElement.value) || 0;\n        var newValue = this.validateValue(currentValue + step);\n\n        if (this.maxlength && this.maxlength < this.formatValue(newValue).length) {\n          return;\n        }\n\n        this.updateInput(newValue, null, 'spin');\n        this.updateModel(event, newValue);\n        this.handleOnInput(event, currentValue, newValue);\n      }\n    }, {\n      key: \"onUpButtonMouseDown\",\n      value: function onUpButtonMouseDown(event) {\n        this.input.nativeElement.focus();\n        this.repeat(event, null, 1);\n        event.preventDefault();\n      }\n    }, {\n      key: \"onUpButtonMouseUp\",\n      value: function onUpButtonMouseUp() {\n        this.clearTimer();\n      }\n    }, {\n      key: \"onUpButtonMouseLeave\",\n      value: function onUpButtonMouseLeave() {\n        this.clearTimer();\n      }\n    }, {\n      key: \"onUpButtonKeyDown\",\n      value: function onUpButtonKeyDown(event) {\n        if (event.keyCode === 32 || event.keyCode === 13) {\n          this.repeat(event, null, 1);\n        }\n      }\n    }, {\n      key: \"onUpButtonKeyUp\",\n      value: function onUpButtonKeyUp() {\n        this.clearTimer();\n      }\n    }, {\n      key: \"onDownButtonMouseDown\",\n      value: function onDownButtonMouseDown(event) {\n        this.input.nativeElement.focus();\n        this.repeat(event, null, -1);\n        event.preventDefault();\n      }\n    }, {\n      key: \"onDownButtonMouseUp\",\n      value: function onDownButtonMouseUp() {\n        this.clearTimer();\n      }\n    }, {\n      key: \"onDownButtonMouseLeave\",\n      value: function onDownButtonMouseLeave() {\n        this.clearTimer();\n      }\n    }, {\n      key: \"onDownButtonKeyUp\",\n      value: function onDownButtonKeyUp() {\n        this.clearTimer();\n      }\n    }, {\n      key: \"onDownButtonKeyDown\",\n      value: function onDownButtonKeyDown(event) {\n        if (event.keyCode === 32 || event.keyCode === 13) {\n          this.repeat(event, null, -1);\n        }\n      }\n    }, {\n      key: \"onUserInput\",\n      value: function onUserInput(event) {\n        if (this.isSpecialChar) {\n          event.target.value = this.lastValue;\n        }\n\n        this.isSpecialChar = false;\n      }\n    }, {\n      key: \"onInputKeyDown\",\n      value: function onInputKeyDown(event) {\n        this.lastValue = event.target.value;\n\n        if (event.shiftKey || event.altKey) {\n          this.isSpecialChar = true;\n          return;\n        }\n\n        var selectionStart = event.target.selectionStart;\n        var selectionEnd = event.target.selectionEnd;\n        var inputValue = event.target.value;\n        var newValueStr = null;\n\n        if (event.altKey) {\n          event.preventDefault();\n        }\n\n        switch (event.which) {\n          //up\n          case 38:\n            this.spin(event, 1);\n            event.preventDefault();\n            break;\n          //down\n\n          case 40:\n            this.spin(event, -1);\n            event.preventDefault();\n            break;\n          //left\n\n          case 37:\n            if (!this.isNumeralChar(inputValue.charAt(selectionStart - 1))) {\n              event.preventDefault();\n            }\n\n            break;\n          //right\n\n          case 39:\n            if (!this.isNumeralChar(inputValue.charAt(selectionStart))) {\n              event.preventDefault();\n            }\n\n            break;\n          //enter\n\n          case 13:\n            var newValue = this.validateValue(this.parseValue(this.input.nativeElement.value));\n            this.input.nativeElement.value = this.formatValue(newValue);\n            this.input.nativeElement.setAttribute('aria-valuenow', newValue);\n            this.updateModel(event, newValue);\n            break;\n          //backspace\n\n          case 8:\n            {\n              event.preventDefault();\n\n              if (selectionStart === selectionEnd) {\n                var deleteChar = inputValue.charAt(selectionStart - 1);\n                var decimalCharIndex = inputValue.search(this._decimal);\n                this._decimal.lastIndex = 0;\n\n                if (this.isNumeralChar(deleteChar)) {\n                  if (this._group.test(deleteChar)) {\n                    this._group.lastIndex = 0;\n                    newValueStr = inputValue.slice(0, selectionStart - 2) + inputValue.slice(selectionStart - 1);\n                  } else if (this._decimal.test(deleteChar)) {\n                    this._decimal.lastIndex = 0;\n                    this.input.nativeElement.setSelectionRange(selectionStart - 1, selectionStart - 1);\n                  } else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                    newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n                  } else if (decimalCharIndex > 0 && decimalCharIndex === 1) {\n                    newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n                    newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                  } else {\n                    newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                  }\n                }\n\n                this.updateValue(event, newValueStr, null, 'delete-single');\n              } else {\n                newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                this.updateValue(event, newValueStr, null, 'delete-range');\n              }\n\n              break;\n            }\n          // del\n\n          case 46:\n            event.preventDefault();\n\n            if (selectionStart === selectionEnd) {\n              var _deleteChar = inputValue.charAt(selectionStart);\n\n              var _decimalCharIndex = inputValue.search(this._decimal);\n\n              this._decimal.lastIndex = 0;\n\n              if (this.isNumeralChar(_deleteChar)) {\n                if (this._group.test(_deleteChar)) {\n                  this._group.lastIndex = 0;\n                  newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 2);\n                } else if (this._decimal.test(_deleteChar)) {\n                  this._decimal.lastIndex = 0;\n                  this.input.nativeElement.setSelectionRange(selectionStart + 1, selectionStart + 1);\n                } else if (_decimalCharIndex > 0 && selectionStart > _decimalCharIndex) {\n                  newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\n                } else if (_decimalCharIndex > 0 && _decimalCharIndex === 1) {\n                  newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\n                  newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                } else {\n                  newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n                }\n              }\n\n              this.updateValue(event, newValueStr, null, 'delete-back-single');\n            } else {\n              newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n              this.updateValue(event, newValueStr, null, 'delete-range');\n            }\n\n            break;\n\n          default:\n            break;\n        }\n\n        this.onKeyDown.emit(event);\n      }\n    }, {\n      key: \"onInputKeyPress\",\n      value: function onInputKeyPress(event) {\n        event.preventDefault();\n        var code = event.which || event.keyCode;\n        var char = String.fromCharCode(code);\n        var isDecimalSign = this.isDecimalSign(char);\n        var isMinusSign = this.isMinusSign(char);\n\n        if (48 <= code && code <= 57 || isMinusSign || isDecimalSign) {\n          this.insert(event, char, {\n            isDecimalSign: isDecimalSign,\n            isMinusSign: isMinusSign\n          });\n        }\n      }\n    }, {\n      key: \"onPaste\",\n      value: function onPaste(event) {\n        if (!this.disabled) {\n          event.preventDefault();\n          var data = (event.clipboardData || window['clipboardData']).getData('Text');\n\n          if (data) {\n            var filteredData = this.parseValue(data);\n\n            if (filteredData != null) {\n              this.insert(event, filteredData.toString());\n            }\n          }\n        }\n      }\n    }, {\n      key: \"isMinusSign\",\n      value: function isMinusSign(char) {\n        if (this._minusSign.test(char)) {\n          this._minusSign.lastIndex = 0;\n          return true;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"isDecimalSign\",\n      value: function isDecimalSign(char) {\n        if (this._decimal.test(char)) {\n          this._decimal.lastIndex = 0;\n          return true;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"insert\",\n      value: function insert(event, text) {\n        var sign = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n          isDecimalSign: false,\n          isMinusSign: false\n        };\n        var selectionStart = this.input.nativeElement.selectionStart;\n        var selectionEnd = this.input.nativeElement.selectionEnd;\n        var inputValue = this.input.nativeElement.value.trim();\n        var decimalCharIndex = inputValue.search(this._decimal);\n        this._decimal.lastIndex = 0;\n        var minusCharIndex = inputValue.search(this._minusSign);\n        this._minusSign.lastIndex = 0;\n        var newValueStr;\n\n        if (sign.isMinusSign) {\n          if (selectionStart === 0) {\n            newValueStr = inputValue;\n\n            if (minusCharIndex === -1 || selectionEnd !== 0) {\n              newValueStr = this.insertText(inputValue, text, 0, selectionEnd);\n            }\n\n            this.updateValue(event, newValueStr, text, 'insert');\n          }\n        } else if (sign.isDecimalSign) {\n          if (decimalCharIndex > 0 && selectionStart === decimalCharIndex) {\n            this.updateValue(event, inputValue, text, 'insert');\n          } else if (decimalCharIndex > selectionStart && decimalCharIndex < selectionEnd) {\n            newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n            this.updateValue(event, newValueStr, text, 'insert');\n          }\n        } else {\n          var maxFractionDigits = this.numberFormat.resolvedOptions().maximumFractionDigits;\n          var operation = selectionStart !== selectionEnd ? 'range-insert' : 'insert';\n\n          if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n            if (selectionStart + text.length - (decimalCharIndex + 1) <= maxFractionDigits) {\n              newValueStr = inputValue.slice(0, selectionStart) + text + inputValue.slice(selectionStart + text.length);\n              this.updateValue(event, newValueStr, text, operation);\n            }\n          } else {\n            newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n            this.updateValue(event, newValueStr, text, operation);\n          }\n        }\n      }\n    }, {\n      key: \"insertText\",\n      value: function insertText(value, text, start, end) {\n        var textSplit = text.split('.');\n\n        if (textSplit.length == 2) {\n          var decimalCharIndex = value.slice(start, end).search(this._decimal);\n          this._decimal.lastIndex = 0;\n          return decimalCharIndex > 0 ? value.slice(0, start) + this.formatValue(text) + value.slice(end) : value || this.formatValue(text);\n        } else if (end - start === value.length) {\n          return this.formatValue(text);\n        } else if (start === 0) {\n          return text + value.slice(end);\n        } else if (end === value.length) {\n          return value.slice(0, start) + text;\n        } else {\n          return value.slice(0, start) + text + value.slice(end);\n        }\n      }\n    }, {\n      key: \"deleteRange\",\n      value: function deleteRange(value, start, end) {\n        var newValueStr;\n        if (end - start === value.length) newValueStr = '';else if (start === 0) newValueStr = value.slice(end);else if (end === value.length) newValueStr = value.slice(0, start);else newValueStr = value.slice(0, start) + value.slice(end);\n        return newValueStr;\n      }\n    }, {\n      key: \"initCursor\",\n      value: function initCursor() {\n        var selectionStart = this.input.nativeElement.selectionStart;\n        var inputValue = this.input.nativeElement.value;\n        var valueLength = inputValue.length;\n        var index = null;\n        var char = inputValue.charAt(selectionStart);\n\n        if (this.isNumeralChar(char)) {\n          return;\n        } //left\n\n\n        var i = selectionStart - 1;\n\n        while (i >= 0) {\n          char = inputValue.charAt(i);\n\n          if (this.isNumeralChar(char)) {\n            index = i;\n            break;\n          } else {\n            i--;\n          }\n        }\n\n        if (index !== null) {\n          this.input.nativeElement.setSelectionRange(index + 1, index + 1);\n        } else {\n          i = selectionStart + 1;\n\n          while (i < valueLength) {\n            char = inputValue.charAt(i);\n\n            if (this.isNumeralChar(char)) {\n              index = i;\n              break;\n            } else {\n              i++;\n            }\n          }\n\n          if (index !== null) {\n            this.input.nativeElement.setSelectionRange(index, index);\n          }\n        }\n      }\n    }, {\n      key: \"onInputClick\",\n      value: function onInputClick() {\n        this.initCursor();\n      }\n    }, {\n      key: \"isNumeralChar\",\n      value: function isNumeralChar(char) {\n        if (char.length === 1 && (this._numeral.test(char) || this._decimal.test(char) || this._group.test(char) || this._minusSign.test(char))) {\n          this.resetRegex();\n          return true;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"resetRegex\",\n      value: function resetRegex() {\n        this._numeral.lastIndex = 0;\n        this._decimal.lastIndex = 0;\n        this._group.lastIndex = 0;\n        this._minusSign.lastIndex = 0;\n      }\n    }, {\n      key: \"updateValue\",\n      value: function updateValue(event, valueStr, insertedValueStr, operation) {\n        var currentValue = this.input.nativeElement.value;\n        var newValue = null;\n\n        if (valueStr != null) {\n          newValue = this.parseValue(valueStr);\n          this.updateInput(newValue, insertedValueStr, operation);\n        }\n\n        this.handleOnInput(event, currentValue, newValue);\n      }\n    }, {\n      key: \"handleOnInput\",\n      value: function handleOnInput(event, currentValue, newValue) {\n        if (this.isValueChanged(currentValue, newValue)) {\n          this.onInput.emit({\n            originalEvent: event,\n            value: newValue\n          });\n        }\n      }\n    }, {\n      key: \"isValueChanged\",\n      value: function isValueChanged(currentValue, newValue) {\n        if (newValue === null && currentValue !== null) {\n          return true;\n        }\n\n        if (newValue != null) {\n          var parsedCurrentValue = typeof currentValue === 'string' ? this.parseValue(currentValue) : currentValue;\n          return newValue !== parsedCurrentValue;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"validateValue\",\n      value: function validateValue(value) {\n        if (this.min !== null && value < this.min) {\n          return this.min;\n        }\n\n        if (this.max !== null && value > this.max) {\n          return this.max;\n        }\n\n        if (value === '-') {\n          // Minus sign\n          return null;\n        }\n\n        return value;\n      }\n    }, {\n      key: \"updateInput\",\n      value: function updateInput(value, insertedValueStr, operation) {\n        insertedValueStr = insertedValueStr || '';\n        var inputValue = this.input.nativeElement.value;\n        var newValue = this.formatValue(value);\n        var currentLength = inputValue.length;\n\n        if (currentLength === 0) {\n          this.input.nativeElement.value = newValue;\n          this.input.nativeElement.setSelectionRange(0, 0);\n          this.initCursor();\n          var prefixLength = (this.prefixChar || '').length;\n          var selectionEnd = prefixLength + insertedValueStr.length;\n          this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\n        } else {\n          var selectionStart = this.input.nativeElement.selectionStart;\n          var _selectionEnd = this.input.nativeElement.selectionEnd;\n\n          if (this.maxlength && this.maxlength < newValue.length) {\n            return;\n          }\n\n          this.input.nativeElement.value = newValue;\n          var newLength = newValue.length;\n\n          if (operation === 'range-insert') {\n            var startValue = this.parseValue((inputValue || '').slice(0, selectionStart));\n            var startValueStr = startValue !== null ? startValue.toString() : '';\n            var startExpr = startValueStr.split('').join(\"(\".concat(this.groupChar, \")?\"));\n            var sRegex = new RegExp(startExpr, 'g');\n            sRegex.test(newValue);\n            var tExpr = insertedValueStr.split('').join(\"(\".concat(this.groupChar, \")?\"));\n            var tRegex = new RegExp(tExpr, 'g');\n            tRegex.test(newValue.slice(sRegex.lastIndex));\n            _selectionEnd = sRegex.lastIndex + tRegex.lastIndex;\n            this.input.nativeElement.setSelectionRange(_selectionEnd, _selectionEnd);\n          } else if (newLength === currentLength) {\n            if (operation === 'insert' || operation === 'delete-back-single') this.input.nativeElement.setSelectionRange(_selectionEnd + 1, _selectionEnd + 1);else if (operation === 'delete-single') this.input.nativeElement.setSelectionRange(_selectionEnd - 1, _selectionEnd - 1);else if (operation === 'delete-range' || operation === 'spin') this.input.nativeElement.setSelectionRange(_selectionEnd, _selectionEnd);\n          } else if (operation === 'delete-back-single') {\n            var prevChar = inputValue.charAt(_selectionEnd - 1);\n            var nextChar = inputValue.charAt(_selectionEnd);\n            var diff = currentLength - newLength;\n\n            var isGroupChar = this._group.test(nextChar);\n\n            if (isGroupChar && diff === 1) {\n              _selectionEnd += 1;\n            } else if (!isGroupChar && this.isNumeralChar(prevChar)) {\n              _selectionEnd += -1 * diff + 1;\n            }\n\n            this._group.lastIndex = 0;\n            this.input.nativeElement.setSelectionRange(_selectionEnd, _selectionEnd);\n          } else {\n            _selectionEnd = _selectionEnd + (newLength - currentLength);\n            this.input.nativeElement.setSelectionRange(_selectionEnd, _selectionEnd);\n          }\n        }\n\n        this.input.nativeElement.setAttribute('aria-valuenow', value);\n      }\n    }, {\n      key: \"onInputFocus\",\n      value: function onInputFocus(event) {\n        this.focused = true;\n        this.onFocus.emit(event);\n      }\n    }, {\n      key: \"onInputBlur\",\n      value: function onInputBlur(event) {\n        this.focused = false;\n        var newValue = this.validateValue(this.parseValue(this.input.nativeElement.value));\n        this.input.nativeElement.value = this.formatValue(newValue);\n        this.input.nativeElement.setAttribute('aria-valuenow', newValue);\n        this.updateModel(event, newValue);\n        this.onBlur.emit(event);\n      }\n    }, {\n      key: \"formattedValue\",\n      value: function formattedValue() {\n        return this.formatValue(this.value);\n      }\n    }, {\n      key: \"updateModel\",\n      value: function updateModel(event, value) {\n        if (this.value !== value) {\n          this.value = value;\n          this.onModelChange(value);\n        }\n\n        this.onModelTouched();\n      }\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this.value = value;\n        this.cd.markForCheck();\n      }\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.onModelChange = fn;\n      }\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onModelTouched = fn;\n      }\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(val) {\n        this.disabled = val;\n        this.cd.markForCheck();\n      }\n    }, {\n      key: \"filled\",\n      get: function get() {\n        return this.value != null && this.value.toString().length > 0;\n      }\n    }, {\n      key: \"clearTimer\",\n      value: function clearTimer() {\n        if (this.timer) {\n          clearInterval(this.timer);\n        }\n      }\n    }]);\n\n    return InputNumber;\n  }();\n\n  InputNumber.ɵfac = function InputNumber_Factory(t) {\n    return new (t || InputNumber)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  InputNumber.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: InputNumber,\n    selectors: [[\"p-inputNumber\"]],\n    viewQuery: function InputNumber_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.input = _t.first);\n      }\n    },\n    hostVars: 4,\n    hostBindings: function InputNumber_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"p-inputwrapper-filled\", ctx.filled)(\"p-inputwrapper-focus\", ctx.focused);\n      }\n    },\n    inputs: {\n      showButtons: \"showButtons\",\n      format: \"format\",\n      buttonLayout: \"buttonLayout\",\n      incrementButtonIcon: \"incrementButtonIcon\",\n      decrementButtonIcon: \"decrementButtonIcon\",\n      step: \"step\",\n      locale: \"locale\",\n      localeMatcher: \"localeMatcher\",\n      mode: \"mode\",\n      currency: \"currency\",\n      currencyDisplay: \"currencyDisplay\",\n      useGrouping: \"useGrouping\",\n      minFractionDigits: \"minFractionDigits\",\n      maxFractionDigits: \"maxFractionDigits\",\n      prefix: \"prefix\",\n      suffix: \"suffix\",\n      disabled: \"disabled\",\n      inputId: \"inputId\",\n      styleClass: \"styleClass\",\n      style: \"style\",\n      placeholder: \"placeholder\",\n      size: \"size\",\n      maxlength: \"maxlength\",\n      tabindex: \"tabindex\",\n      title: \"title\",\n      ariaLabel: \"ariaLabel\",\n      ariaRequired: \"ariaRequired\",\n      name: \"name\",\n      required: \"required\",\n      autocomplete: \"autocomplete\",\n      min: \"min\",\n      max: \"max\",\n      incrementButtonClass: \"incrementButtonClass\",\n      decrementButtonClass: \"decrementButtonClass\",\n      inputStyle: \"inputStyle\",\n      inputStyleClass: \"inputStyleClass\"\n    },\n    outputs: {\n      onInput: \"onInput\",\n      onFocus: \"onFocus\",\n      onBlur: \"onBlur\",\n      onKeyDown: \"onKeyDown\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([INPUTNUMBER_VALUE_ACCESSOR])],\n    decls: 6,\n    vars: 30,\n    consts: [[3, \"ngClass\", \"ngStyle\"], [\"pInputText\", \"\", 3, \"ngClass\", \"ngStyle\", \"value\", \"disabled\", \"input\", \"keydown\", \"keypress\", \"paste\", \"click\", \"focus\", \"blur\"], [\"input\", \"\"], [\"class\", \"p-inputnumber-button-group\", 4, \"ngIf\"], [\"type\", \"button\", \"pButton\", \"\", 3, \"ngClass\", \"class\", \"icon\", \"disabled\", \"mousedown\", \"mouseup\", \"mouseleave\", \"keydown\", \"keyup\", 4, \"ngIf\"], [1, \"p-inputnumber-button-group\"], [\"type\", \"button\", \"pButton\", \"\", 3, \"ngClass\", \"icon\", \"disabled\", \"mousedown\", \"mouseup\", \"mouseleave\", \"keydown\", \"keyup\"]],\n    template: function InputNumber_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"input\", 1, 2);\n        ɵngcc0.ɵɵlistener(\"input\", function InputNumber_Template_input_input_1_listener($event) {\n          return ctx.onUserInput($event);\n        })(\"keydown\", function InputNumber_Template_input_keydown_1_listener($event) {\n          return ctx.onInputKeyDown($event);\n        })(\"keypress\", function InputNumber_Template_input_keypress_1_listener($event) {\n          return ctx.onInputKeyPress($event);\n        })(\"paste\", function InputNumber_Template_input_paste_1_listener($event) {\n          return ctx.onPaste($event);\n        })(\"click\", function InputNumber_Template_input_click_1_listener() {\n          return ctx.onInputClick();\n        })(\"focus\", function InputNumber_Template_input_focus_1_listener($event) {\n          return ctx.onInputFocus($event);\n        })(\"blur\", function InputNumber_Template_input_blur_1_listener($event) {\n          return ctx.onInputBlur($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(3, InputNumber_span_3_Template, 3, 12, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(4, InputNumber_button_4_Template, 1, 6, \"button\", 4);\n        ɵngcc0.ɵɵtemplate(5, InputNumber_button_5_Template, 1, 6, \"button\", 4);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.styleClass);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction3(26, _c3, ctx.showButtons && ctx.buttonLayout === \"stacked\", ctx.showButtons && ctx.buttonLayout === \"horizontal\", ctx.showButtons && ctx.buttonLayout === \"vertical\"))(\"ngStyle\", ctx.style);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassMap(ctx.inputStyleClass);\n        ɵngcc0.ɵɵproperty(\"ngClass\", \"p-inputnumber-input\")(\"ngStyle\", ctx.inputStyle)(\"value\", ctx.formattedValue())(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"placeholder\", ctx.placeholder)(\"title\", ctx.title)(\"id\", ctx.inputId)(\"size\", ctx.size)(\"name\", ctx.name)(\"autocomplete\", ctx.autocomplete)(\"maxlength\", ctx.maxlength)(\"tabindex\", ctx.tabindex)(\"aria-label\", ctx.ariaLabel)(\"aria-required\", ctx.ariaRequired)(\"required\", ctx.required)(\"aria-valuemin\", ctx.min)(\"aria-valuemax\", ctx.max);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showButtons && ctx.buttonLayout === \"stacked\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showButtons && ctx.buttonLayout !== \"stacked\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showButtons && ctx.buttonLayout !== \"stacked\");\n      }\n    },\n    directives: [ɵngcc1.NgClass, ɵngcc1.NgStyle, ɵngcc2.InputText, ɵngcc1.NgIf, ɵngcc3.ButtonDirective],\n    styles: [\".p-inputnumber{display:inline-flex}.p-inputnumber-button{align-items:center;display:flex;flex:0 0 auto;justify-content:center}.p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button .p-button-label,.p-inputnumber-buttons-stacked .p-button.p-inputnumber-button .p-button-label{display:none}.p-inputnumber-buttons-stacked .p-button.p-inputnumber-button-up{border-bottom-left-radius:0;border-bottom-right-radius:0;border-top-left-radius:0;padding:0}.p-inputnumber-buttons-stacked .p-inputnumber-input{border-bottom-right-radius:0;border-top-right-radius:0}.p-inputnumber-buttons-stacked .p-button.p-inputnumber-button-down{border-bottom-left-radius:0;border-top-left-radius:0;border-top-right-radius:0;padding:0}.p-inputnumber-buttons-stacked .p-inputnumber-button-group{display:flex;flex-direction:column}.p-inputnumber-buttons-stacked .p-inputnumber-button-group .p-button.p-inputnumber-button{flex:1 1 auto}.p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button-up{border-bottom-left-radius:0;border-top-left-radius:0;order:3}.p-inputnumber-buttons-horizontal .p-inputnumber-input{border-radius:0;order:2}.p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button-down{border-bottom-right-radius:0;border-top-right-radius:0;order:1}.p-inputnumber-buttons-vertical{flex-direction:column}.p-inputnumber-buttons-vertical .p-button.p-inputnumber-button-up{border-bottom-left-radius:0;border-bottom-right-radius:0;order:1;width:100%}.p-inputnumber-buttons-vertical .p-inputnumber-input{border-radius:0;order:2;text-align:center}.p-inputnumber-buttons-vertical .p-button.p-inputnumber-button-down{border-top-left-radius:0;border-top-right-radius:0;order:3;width:100%}.p-inputnumber-input{flex:1 1 auto}.p-fluid .p-inputnumber{width:100%}.p-fluid .p-inputnumber .p-inputnumber-input{width:1%}.p-fluid .p-inputnumber-buttons-vertical .p-inputnumber-input{width:100%}\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return InputNumber;\n}();\n\nvar InputNumberModule = /*@__PURE__*/function () {\n  var InputNumberModule = /*#__PURE__*/_createClass(function InputNumberModule() {\n    _classCallCheck(this, InputNumberModule);\n  });\n\n  InputNumberModule.ɵfac = function InputNumberModule_Factory(t) {\n    return new (t || InputNumberModule)();\n  };\n\n  InputNumberModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: InputNumberModule\n  });\n  InputNumberModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, InputTextModule, ButtonModule]]\n  });\n  return InputNumberModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(InputNumberModule, {\n    declarations: function declarations() {\n      return [InputNumber];\n    },\n    imports: function imports() {\n      return [CommonModule, InputTextModule, ButtonModule];\n    },\n    exports: function exports() {\n      return [InputNumber];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { INPUTNUMBER_VALUE_ACCESSOR, InputNumber, InputNumberModule }; //# sourceMappingURL=primeng-inputnumber.js.map","map":null,"metadata":{},"sourceType":"module"}