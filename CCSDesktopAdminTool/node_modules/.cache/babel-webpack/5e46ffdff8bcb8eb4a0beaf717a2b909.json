{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar DomHandler = /*@__PURE__*/function () {\n  var DomHandler = /*#__PURE__*/function () {\n    function DomHandler() {\n      _classCallCheck(this, DomHandler);\n    }\n\n    _createClass(DomHandler, null, [{\n      key: \"addClass\",\n      value: function addClass(element, className) {\n        if (element.classList) element.classList.add(className);else element.className += ' ' + className;\n      }\n    }, {\n      key: \"addMultipleClasses\",\n      value: function addMultipleClasses(element, className) {\n        if (element.classList) {\n          var styles = className.trim().split(' ');\n\n          for (var i = 0; i < styles.length; i++) {\n            element.classList.add(styles[i]);\n          }\n        } else {\n          var _styles = className.split(' ');\n\n          for (var _i = 0; _i < _styles.length; _i++) {\n            element.className += ' ' + _styles[_i];\n          }\n        }\n      }\n    }, {\n      key: \"removeClass\",\n      value: function removeClass(element, className) {\n        if (element.classList) element.classList.remove(className);else element.className = element.className.replace(new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n      }\n    }, {\n      key: \"hasClass\",\n      value: function hasClass(element, className) {\n        if (element.classList) return element.classList.contains(className);else return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);\n      }\n    }, {\n      key: \"siblings\",\n      value: function siblings(element) {\n        return Array.prototype.filter.call(element.parentNode.children, function (child) {\n          return child !== element;\n        });\n      }\n    }, {\n      key: \"find\",\n      value: function find(element, selector) {\n        return Array.from(element.querySelectorAll(selector));\n      }\n    }, {\n      key: \"findSingle\",\n      value: function findSingle(element, selector) {\n        if (element) {\n          return element.querySelector(selector);\n        }\n\n        return null;\n      }\n    }, {\n      key: \"index\",\n      value: function index(element) {\n        var children = element.parentNode.childNodes;\n        var num = 0;\n\n        for (var i = 0; i < children.length; i++) {\n          if (children[i] == element) return num;\n          if (children[i].nodeType == 1) num++;\n        }\n\n        return -1;\n      }\n    }, {\n      key: \"indexWithinGroup\",\n      value: function indexWithinGroup(element, attributeName) {\n        var children = element.parentNode ? element.parentNode.childNodes : [];\n        var num = 0;\n\n        for (var i = 0; i < children.length; i++) {\n          if (children[i] == element) return num;\n          if (children[i].attributes && children[i].attributes[attributeName] && children[i].nodeType == 1) num++;\n        }\n\n        return -1;\n      }\n    }, {\n      key: \"relativePosition\",\n      value: function relativePosition(element, target) {\n        var elementDimensions = element.offsetParent ? {\n          width: element.offsetWidth,\n          height: element.offsetHeight\n        } : this.getHiddenElementDimensions(element);\n        var targetHeight = target.offsetHeight;\n        var targetOffset = target.getBoundingClientRect();\n        var viewport = this.getViewport();\n        var top, left;\n\n        if (targetOffset.top + targetHeight + elementDimensions.height > viewport.height) {\n          top = -1 * elementDimensions.height;\n          element.style.transformOrigin = 'bottom';\n\n          if (targetOffset.top + top < 0) {\n            top = -1 * targetOffset.top;\n          }\n        } else {\n          top = targetHeight;\n          element.style.transformOrigin = 'top';\n        }\n\n        if (elementDimensions.width > viewport.width) {\n          // element wider then viewport and cannot fit on screen (align at left side of viewport)\n          left = targetOffset.left * -1;\n        } else if (targetOffset.left + elementDimensions.width > viewport.width) {\n          // element wider then viewport but can be fit on screen (align at right side of viewport)\n          left = (targetOffset.left + elementDimensions.width - viewport.width) * -1;\n        } else {\n          // element fits on screen (align with target)\n          left = 0;\n        }\n\n        element.style.top = top + 'px';\n        element.style.left = left + 'px';\n      }\n    }, {\n      key: \"absolutePosition\",\n      value: function absolutePosition(element, target) {\n        var elementDimensions = element.offsetParent ? {\n          width: element.offsetWidth,\n          height: element.offsetHeight\n        } : this.getHiddenElementDimensions(element);\n        var elementOuterHeight = elementDimensions.height;\n        var elementOuterWidth = elementDimensions.width;\n        var targetOuterHeight = target.offsetHeight;\n        var targetOuterWidth = target.offsetWidth;\n        var targetOffset = target.getBoundingClientRect();\n        var windowScrollTop = this.getWindowScrollTop();\n        var windowScrollLeft = this.getWindowScrollLeft();\n        var viewport = this.getViewport();\n        var top, left;\n\n        if (targetOffset.top + targetOuterHeight + elementOuterHeight > viewport.height) {\n          top = targetOffset.top + windowScrollTop - elementOuterHeight;\n          element.style.transformOrigin = 'bottom';\n\n          if (top < 0) {\n            top = windowScrollTop;\n          }\n        } else {\n          top = targetOuterHeight + targetOffset.top + windowScrollTop;\n          element.style.transformOrigin = 'top';\n        }\n\n        if (targetOffset.left + elementOuterWidth > viewport.width) left = Math.max(0, targetOffset.left + windowScrollLeft + targetOuterWidth - elementOuterWidth);else left = targetOffset.left + windowScrollLeft;\n        element.style.top = top + 'px';\n        element.style.left = left + 'px';\n      }\n    }, {\n      key: \"getParents\",\n      value: function getParents(element) {\n        var parents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n        return element['parentNode'] === null ? parents : this.getParents(element.parentNode, parents.concat([element.parentNode]));\n      }\n    }, {\n      key: \"getScrollableParents\",\n      value: function getScrollableParents(element) {\n        var scrollableParents = [];\n\n        if (element) {\n          var parents = this.getParents(element);\n          var overflowRegex = /(auto|scroll)/;\n\n          var overflowCheck = function overflowCheck(node) {\n            var styleDeclaration = window['getComputedStyle'](node, null);\n            return overflowRegex.test(styleDeclaration.getPropertyValue('overflow')) || overflowRegex.test(styleDeclaration.getPropertyValue('overflowX')) || overflowRegex.test(styleDeclaration.getPropertyValue('overflowY'));\n          };\n\n          var _iterator = _createForOfIteratorHelper(parents),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var parent = _step.value;\n              var scrollSelectors = parent.nodeType === 1 && parent.dataset['scrollselectors'];\n\n              if (scrollSelectors) {\n                var selectors = scrollSelectors.split(',');\n\n                var _iterator2 = _createForOfIteratorHelper(selectors),\n                    _step2;\n\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    var selector = _step2.value;\n                    var el = this.findSingle(parent, selector);\n\n                    if (el && overflowCheck(el)) {\n                      scrollableParents.push(el);\n                    }\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n              }\n\n              if (parent.nodeType !== 9 && overflowCheck(parent)) {\n                scrollableParents.push(parent);\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n\n        return scrollableParents;\n      }\n    }, {\n      key: \"getHiddenElementOuterHeight\",\n      value: function getHiddenElementOuterHeight(element) {\n        element.style.visibility = 'hidden';\n        element.style.display = 'block';\n        var elementHeight = element.offsetHeight;\n        element.style.display = 'none';\n        element.style.visibility = 'visible';\n        return elementHeight;\n      }\n    }, {\n      key: \"getHiddenElementOuterWidth\",\n      value: function getHiddenElementOuterWidth(element) {\n        element.style.visibility = 'hidden';\n        element.style.display = 'block';\n        var elementWidth = element.offsetWidth;\n        element.style.display = 'none';\n        element.style.visibility = 'visible';\n        return elementWidth;\n      }\n    }, {\n      key: \"getHiddenElementDimensions\",\n      value: function getHiddenElementDimensions(element) {\n        var dimensions = {};\n        element.style.visibility = 'hidden';\n        element.style.display = 'block';\n        dimensions.width = element.offsetWidth;\n        dimensions.height = element.offsetHeight;\n        element.style.display = 'none';\n        element.style.visibility = 'visible';\n        return dimensions;\n      }\n    }, {\n      key: \"scrollInView\",\n      value: function scrollInView(container, item) {\n        var borderTopValue = getComputedStyle(container).getPropertyValue('borderTopWidth');\n        var borderTop = borderTopValue ? parseFloat(borderTopValue) : 0;\n        var paddingTopValue = getComputedStyle(container).getPropertyValue('paddingTop');\n        var paddingTop = paddingTopValue ? parseFloat(paddingTopValue) : 0;\n        var containerRect = container.getBoundingClientRect();\n        var itemRect = item.getBoundingClientRect();\n        var offset = itemRect.top + document.body.scrollTop - (containerRect.top + document.body.scrollTop) - borderTop - paddingTop;\n        var scroll = container.scrollTop;\n        var elementHeight = container.clientHeight;\n        var itemHeight = this.getOuterHeight(item);\n\n        if (offset < 0) {\n          container.scrollTop = scroll + offset;\n        } else if (offset + itemHeight > elementHeight) {\n          container.scrollTop = scroll + offset - elementHeight + itemHeight;\n        }\n      }\n    }, {\n      key: \"fadeIn\",\n      value: function fadeIn(element, duration) {\n        element.style.opacity = 0;\n        var last = +new Date();\n        var opacity = 0;\n\n        var tick = function tick() {\n          opacity = +element.style.opacity.replace(\",\", \".\") + (new Date().getTime() - last) / duration;\n          element.style.opacity = opacity;\n          last = +new Date();\n\n          if (+opacity < 1) {\n            window.requestAnimationFrame && requestAnimationFrame(tick) || setTimeout(tick, 16);\n          }\n        };\n\n        tick();\n      }\n    }, {\n      key: \"fadeOut\",\n      value: function fadeOut(element, ms) {\n        var opacity = 1,\n            interval = 50,\n            duration = ms,\n            gap = interval / duration;\n        var fading = setInterval(function () {\n          opacity = opacity - gap;\n\n          if (opacity <= 0) {\n            opacity = 0;\n            clearInterval(fading);\n          }\n\n          element.style.opacity = opacity;\n        }, interval);\n      }\n    }, {\n      key: \"getWindowScrollTop\",\n      value: function getWindowScrollTop() {\n        var doc = document.documentElement;\n        return (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);\n      }\n    }, {\n      key: \"getWindowScrollLeft\",\n      value: function getWindowScrollLeft() {\n        var doc = document.documentElement;\n        return (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n      }\n    }, {\n      key: \"matches\",\n      value: function matches(element, selector) {\n        var p = Element.prototype;\n\n        var f = p['matches'] || p.webkitMatchesSelector || p['mozMatchesSelector'] || p['msMatchesSelector'] || function (s) {\n          return [].indexOf.call(document.querySelectorAll(s), this) !== -1;\n        };\n\n        return f.call(element, selector);\n      }\n    }, {\n      key: \"getOuterWidth\",\n      value: function getOuterWidth(el, margin) {\n        var width = el.offsetWidth;\n\n        if (margin) {\n          var style = getComputedStyle(el);\n          width += parseFloat(style.marginLeft) + parseFloat(style.marginRight);\n        }\n\n        return width;\n      }\n    }, {\n      key: \"getHorizontalPadding\",\n      value: function getHorizontalPadding(el) {\n        var style = getComputedStyle(el);\n        return parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);\n      }\n    }, {\n      key: \"getHorizontalMargin\",\n      value: function getHorizontalMargin(el) {\n        var style = getComputedStyle(el);\n        return parseFloat(style.marginLeft) + parseFloat(style.marginRight);\n      }\n    }, {\n      key: \"innerWidth\",\n      value: function innerWidth(el) {\n        var width = el.offsetWidth;\n        var style = getComputedStyle(el);\n        width += parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);\n        return width;\n      }\n    }, {\n      key: \"width\",\n      value: function width(el) {\n        var width = el.offsetWidth;\n        var style = getComputedStyle(el);\n        width -= parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);\n        return width;\n      }\n    }, {\n      key: \"getInnerHeight\",\n      value: function getInnerHeight(el) {\n        var height = el.offsetHeight;\n        var style = getComputedStyle(el);\n        height += parseFloat(style.paddingTop) + parseFloat(style.paddingBottom);\n        return height;\n      }\n    }, {\n      key: \"getOuterHeight\",\n      value: function getOuterHeight(el, margin) {\n        var height = el.offsetHeight;\n\n        if (margin) {\n          var style = getComputedStyle(el);\n          height += parseFloat(style.marginTop) + parseFloat(style.marginBottom);\n        }\n\n        return height;\n      }\n    }, {\n      key: \"getHeight\",\n      value: function getHeight(el) {\n        var height = el.offsetHeight;\n        var style = getComputedStyle(el);\n        height -= parseFloat(style.paddingTop) + parseFloat(style.paddingBottom) + parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth);\n        return height;\n      }\n    }, {\n      key: \"getWidth\",\n      value: function getWidth(el) {\n        var width = el.offsetWidth;\n        var style = getComputedStyle(el);\n        width -= parseFloat(style.paddingLeft) + parseFloat(style.paddingRight) + parseFloat(style.borderLeftWidth) + parseFloat(style.borderRightWidth);\n        return width;\n      }\n    }, {\n      key: \"getViewport\",\n      value: function getViewport() {\n        var win = window,\n            d = document,\n            e = d.documentElement,\n            g = d.getElementsByTagName('body')[0],\n            w = win.innerWidth || e.clientWidth || g.clientWidth,\n            h = win.innerHeight || e.clientHeight || g.clientHeight;\n        return {\n          width: w,\n          height: h\n        };\n      }\n    }, {\n      key: \"getOffset\",\n      value: function getOffset(el) {\n        var rect = el.getBoundingClientRect();\n        return {\n          top: rect.top + (window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0),\n          left: rect.left + (window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0)\n        };\n      }\n    }, {\n      key: \"replaceElementWith\",\n      value: function replaceElementWith(element, replacementElement) {\n        var parentNode = element.parentNode;\n        if (!parentNode) throw \"Can't replace element\";\n        return parentNode.replaceChild(replacementElement, element);\n      }\n    }, {\n      key: \"getUserAgent\",\n      value: function getUserAgent() {\n        return navigator.userAgent;\n      }\n    }, {\n      key: \"isIE\",\n      value: function isIE() {\n        var ua = window.navigator.userAgent;\n        var msie = ua.indexOf('MSIE ');\n\n        if (msie > 0) {\n          // IE 10 or older => return version number\n          return true;\n        }\n\n        var trident = ua.indexOf('Trident/');\n\n        if (trident > 0) {\n          // IE 11 => return version number\n          var rv = ua.indexOf('rv:');\n          return true;\n        }\n\n        var edge = ua.indexOf('Edge/');\n\n        if (edge > 0) {\n          // Edge (IE 12+) => return version number\n          return true;\n        } // other browser\n\n\n        return false;\n      }\n    }, {\n      key: \"isIOS\",\n      value: function isIOS() {\n        return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window['MSStream'];\n      }\n    }, {\n      key: \"isAndroid\",\n      value: function isAndroid() {\n        return /(android)/i.test(navigator.userAgent);\n      }\n    }, {\n      key: \"appendChild\",\n      value: function appendChild(element, target) {\n        if (this.isElement(target)) target.appendChild(element);else if (target.el && target.el.nativeElement) target.el.nativeElement.appendChild(element);else throw 'Cannot append ' + target + ' to ' + element;\n      }\n    }, {\n      key: \"removeChild\",\n      value: function removeChild(element, target) {\n        if (this.isElement(target)) target.removeChild(element);else if (target.el && target.el.nativeElement) target.el.nativeElement.removeChild(element);else throw 'Cannot remove ' + element + ' from ' + target;\n      }\n    }, {\n      key: \"removeElement\",\n      value: function removeElement(element) {\n        if (!('remove' in Element.prototype)) element.parentNode.removeChild(element);else element.remove();\n      }\n    }, {\n      key: \"isElement\",\n      value: function isElement(obj) {\n        return typeof HTMLElement === \"object\" ? obj instanceof HTMLElement : obj && typeof obj === \"object\" && obj !== null && obj.nodeType === 1 && typeof obj.nodeName === \"string\";\n      }\n    }, {\n      key: \"calculateScrollbarWidth\",\n      value: function calculateScrollbarWidth(el) {\n        if (el) {\n          var style = getComputedStyle(el);\n          return el.offsetWidth - el.clientWidth - parseFloat(style.borderLeftWidth) - parseFloat(style.borderRightWidth);\n        } else {\n          if (this.calculatedScrollbarWidth !== null) return this.calculatedScrollbarWidth;\n          var scrollDiv = document.createElement(\"div\");\n          scrollDiv.className = \"p-scrollbar-measure\";\n          document.body.appendChild(scrollDiv);\n          var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n          document.body.removeChild(scrollDiv);\n          this.calculatedScrollbarWidth = scrollbarWidth;\n          return scrollbarWidth;\n        }\n      }\n    }, {\n      key: \"calculateScrollbarHeight\",\n      value: function calculateScrollbarHeight() {\n        if (this.calculatedScrollbarHeight !== null) return this.calculatedScrollbarHeight;\n        var scrollDiv = document.createElement(\"div\");\n        scrollDiv.className = \"p-scrollbar-measure\";\n        document.body.appendChild(scrollDiv);\n        var scrollbarHeight = scrollDiv.offsetHeight - scrollDiv.clientHeight;\n        document.body.removeChild(scrollDiv);\n        this.calculatedScrollbarWidth = scrollbarHeight;\n        return scrollbarHeight;\n      }\n    }, {\n      key: \"invokeElementMethod\",\n      value: function invokeElementMethod(element, methodName, args) {\n        element[methodName].apply(element, args);\n      }\n    }, {\n      key: \"clearSelection\",\n      value: function clearSelection() {\n        if (window.getSelection) {\n          if (window.getSelection().empty) {\n            window.getSelection().empty();\n          } else if (window.getSelection().removeAllRanges && window.getSelection().rangeCount > 0 && window.getSelection().getRangeAt(0).getClientRects().length > 0) {\n            window.getSelection().removeAllRanges();\n          }\n        } else if (document['selection'] && document['selection'].empty) {\n          try {\n            document['selection'].empty();\n          } catch (error) {//ignore IE bug\n          }\n        }\n      }\n    }, {\n      key: \"getBrowser\",\n      value: function getBrowser() {\n        if (!this.browser) {\n          var matched = this.resolveUserAgent();\n          this.browser = {};\n\n          if (matched.browser) {\n            this.browser[matched.browser] = true;\n            this.browser['version'] = matched.version;\n          }\n\n          if (this.browser['chrome']) {\n            this.browser['webkit'] = true;\n          } else if (this.browser['webkit']) {\n            this.browser['safari'] = true;\n          }\n        }\n\n        return this.browser;\n      }\n    }, {\n      key: \"resolveUserAgent\",\n      value: function resolveUserAgent() {\n        var ua = navigator.userAgent.toLowerCase();\n        var match = /(chrome)[ \\/]([\\w.]+)/.exec(ua) || /(webkit)[ \\/]([\\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec(ua) || /(msie) ([\\w.]+)/.exec(ua) || ua.indexOf(\"compatible\") < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec(ua) || [];\n        return {\n          browser: match[1] || \"\",\n          version: match[2] || \"0\"\n        };\n      }\n    }, {\n      key: \"isInteger\",\n      value: function isInteger(value) {\n        if (Number.isInteger) {\n          return Number.isInteger(value);\n        } else {\n          return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n        }\n      }\n    }, {\n      key: \"isHidden\",\n      value: function isHidden(element) {\n        return element.offsetParent === null;\n      }\n    }, {\n      key: \"getFocusableElements\",\n      value: function getFocusableElements(element) {\n        var focusableElements = DomHandler.find(element, \"button:not([tabindex = \\\"-1\\\"]):not([disabled]):not([style*=\\\"display:none\\\"]):not([hidden]),\\n                [href][clientHeight][clientWidth]:not([tabindex = \\\"-1\\\"]):not([disabled]):not([style*=\\\"display:none\\\"]):not([hidden]),\\n                input:not([tabindex = \\\"-1\\\"]):not([disabled]):not([style*=\\\"display:none\\\"]):not([hidden]), select:not([tabindex = \\\"-1\\\"]):not([disabled]):not([style*=\\\"display:none\\\"]):not([hidden]),\\n                textarea:not([tabindex = \\\"-1\\\"]):not([disabled]):not([style*=\\\"display:none\\\"]):not([hidden]), [tabIndex]:not([tabIndex = \\\"-1\\\"]):not([disabled]):not([style*=\\\"display:none\\\"]):not([hidden]),\\n                [contenteditable]:not([tabIndex = \\\"-1\\\"]):not([disabled]):not([style*=\\\"display:none\\\"]):not([hidden])\");\n        var visibleFocusableElements = [];\n\n        var _iterator3 = _createForOfIteratorHelper(focusableElements),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var focusableElement = _step3.value;\n            if (getComputedStyle(focusableElement).display != \"none\" && getComputedStyle(focusableElement).visibility != \"hidden\") visibleFocusableElements.push(focusableElement);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        return visibleFocusableElements;\n      }\n    }, {\n      key: \"generateZIndex\",\n      value: function generateZIndex() {\n        this.zindex = this.zindex || 999;\n        return ++this.zindex;\n      }\n    }]);\n\n    return DomHandler;\n  }();\n\n  DomHandler.zindex = 1000;\n  DomHandler.calculatedScrollbarWidth = null;\n  DomHandler.calculatedScrollbarHeight = null;\n  return DomHandler;\n}();\n\nvar ConnectedOverlayScrollHandler = /*#__PURE__*/function () {\n  function ConnectedOverlayScrollHandler(element) {\n    var listener = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n\n    _classCallCheck(this, ConnectedOverlayScrollHandler);\n\n    this.element = element;\n    this.listener = listener;\n  }\n\n  _createClass(ConnectedOverlayScrollHandler, [{\n    key: \"bindScrollListener\",\n    value: function bindScrollListener() {\n      this.scrollableParents = DomHandler.getScrollableParents(this.element);\n\n      for (var i = 0; i < this.scrollableParents.length; i++) {\n        this.scrollableParents[i].addEventListener('scroll', this.listener);\n      }\n    }\n  }, {\n    key: \"unbindScrollListener\",\n    value: function unbindScrollListener() {\n      if (this.scrollableParents) {\n        for (var i = 0; i < this.scrollableParents.length; i++) {\n          this.scrollableParents[i].removeEventListener('scroll', this.listener);\n        }\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.unbindScrollListener();\n      this.element = null;\n      this.listener = null;\n      this.scrollableParents = null;\n    }\n  }]);\n\n  return ConnectedOverlayScrollHandler;\n}();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { ConnectedOverlayScrollHandler, DomHandler }; //# sourceMappingURL=primeng-dom.js.map","map":null,"metadata":{},"sourceType":"module"}