{"ast":null,"code":"import _get from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Work/admintool/admintool/CCSDesktopAdminTool/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { root } from '../../util/root';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { map } from '../../operators/map';\n\nfunction getCORSRequest() {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest() {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    var progId;\n\n    try {\n      var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n\n      for (var i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {}\n      }\n\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport function ajaxGet(url) {\n  var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return new AjaxObservable({\n    method: 'GET',\n    url: url,\n    headers: headers\n  });\n}\nexport function ajaxPost(url, body, headers) {\n  return new AjaxObservable({\n    method: 'POST',\n    url: url,\n    body: body,\n    headers: headers\n  });\n}\nexport function ajaxDelete(url, headers) {\n  return new AjaxObservable({\n    method: 'DELETE',\n    url: url,\n    headers: headers\n  });\n}\nexport function ajaxPut(url, body, headers) {\n  return new AjaxObservable({\n    method: 'PUT',\n    url: url,\n    body: body,\n    headers: headers\n  });\n}\nexport function ajaxPatch(url, body, headers) {\n  return new AjaxObservable({\n    method: 'PATCH',\n    url: url,\n    body: body,\n    headers: headers\n  });\n}\nvar mapResponse = /*@__PURE__*/map(function (x, index) {\n  return x.response;\n});\nexport function ajaxGetJSON(url, headers) {\n  return mapResponse(new AjaxObservable({\n    method: 'GET',\n    url: url,\n    responseType: 'json',\n    headers: headers\n  }));\n}\nexport var AjaxObservable = /*@__PURE__*/function () {\n  var AjaxObservable = /*#__PURE__*/function (_Observable) {\n    _inherits(AjaxObservable, _Observable);\n\n    var _super = _createSuper(AjaxObservable);\n\n    function AjaxObservable(urlOrRequest) {\n      var _this;\n\n      _classCallCheck(this, AjaxObservable);\n\n      _this = _super.call(this);\n      var request = {\n        async: true,\n        createXHR: function createXHR() {\n          return this.crossDomain ? getCORSRequest() : getXMLHttpRequest();\n        },\n        crossDomain: true,\n        withCredentials: false,\n        headers: {},\n        method: 'GET',\n        responseType: 'json',\n        timeout: 0\n      };\n\n      if (typeof urlOrRequest === 'string') {\n        request.url = urlOrRequest;\n      } else {\n        for (var prop in urlOrRequest) {\n          if (urlOrRequest.hasOwnProperty(prop)) {\n            request[prop] = urlOrRequest[prop];\n          }\n        }\n      }\n\n      _this.request = request;\n      return _this;\n    }\n\n    _createClass(AjaxObservable, [{\n      key: \"_subscribe\",\n      value: function _subscribe(subscriber) {\n        return new AjaxSubscriber(subscriber, this.request);\n      }\n    }]);\n\n    return AjaxObservable;\n  }(Observable);\n\n  AjaxObservable.create = /*@__PURE__*/function () {\n    var create = function create(urlOrRequest) {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.patch = ajaxPatch;\n    create.getJSON = ajaxGetJSON;\n    return create;\n  }();\n\n  return AjaxObservable;\n}();\nexport var AjaxSubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(AjaxSubscriber, _Subscriber);\n\n  var _super2 = _createSuper(AjaxSubscriber);\n\n  function AjaxSubscriber(destination, request) {\n    var _this2;\n\n    _classCallCheck(this, AjaxSubscriber);\n\n    _this2 = _super2.call(this, destination);\n    _this2.request = request;\n    _this2.done = false;\n    var headers = request.headers = request.headers || {};\n\n    if (!request.crossDomain && !_this2.getHeader(headers, 'X-Requested-With')) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    var contentTypeHeader = _this2.getHeader(headers, 'Content-Type');\n\n    if (!contentTypeHeader && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    request.body = _this2.serializeBody(request.body, _this2.getHeader(request.headers, 'Content-Type'));\n\n    _this2.send();\n\n    return _this2;\n  }\n\n  _createClass(AjaxSubscriber, [{\n    key: \"next\",\n    value: function next(e) {\n      this.done = true;\n      var xhr = this.xhr,\n          request = this.request,\n          destination = this.destination;\n      var result;\n\n      try {\n        result = new AjaxResponse(e, xhr, request);\n      } catch (err) {\n        return destination.error(err);\n      }\n\n      destination.next(result);\n    }\n  }, {\n    key: \"send\",\n    value: function send() {\n      var request = this.request,\n          _this$request = this.request,\n          user = _this$request.user,\n          method = _this$request.method,\n          url = _this$request.url,\n          async = _this$request.async,\n          password = _this$request.password,\n          headers = _this$request.headers,\n          body = _this$request.body;\n\n      try {\n        var xhr = this.xhr = request.createXHR();\n        this.setupEvents(xhr, request);\n\n        if (user) {\n          xhr.open(method, url, async, user, password);\n        } else {\n          xhr.open(method, url, async);\n        }\n\n        if (async) {\n          xhr.timeout = request.timeout;\n          xhr.responseType = request.responseType;\n        }\n\n        if ('withCredentials' in xhr) {\n          xhr.withCredentials = !!request.withCredentials;\n        }\n\n        this.setHeaders(xhr, headers);\n\n        if (body) {\n          xhr.send(body);\n        } else {\n          xhr.send();\n        }\n      } catch (err) {\n        this.error(err);\n      }\n    }\n  }, {\n    key: \"serializeBody\",\n    value: function serializeBody(body, contentType) {\n      if (!body || typeof body === 'string') {\n        return body;\n      } else if (root.FormData && body instanceof root.FormData) {\n        return body;\n      }\n\n      if (contentType) {\n        var splitIndex = contentType.indexOf(';');\n\n        if (splitIndex !== -1) {\n          contentType = contentType.substring(0, splitIndex);\n        }\n      }\n\n      switch (contentType) {\n        case 'application/x-www-form-urlencoded':\n          return Object.keys(body).map(function (key) {\n            return \"\".concat(encodeURIComponent(key), \"=\").concat(encodeURIComponent(body[key]));\n          }).join('&');\n\n        case 'application/json':\n          return JSON.stringify(body);\n\n        default:\n          return body;\n      }\n    }\n  }, {\n    key: \"setHeaders\",\n    value: function setHeaders(xhr, headers) {\n      for (var key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          xhr.setRequestHeader(key, headers[key]);\n        }\n      }\n    }\n  }, {\n    key: \"getHeader\",\n    value: function getHeader(headers, headerName) {\n      for (var key in headers) {\n        if (key.toLowerCase() === headerName.toLowerCase()) {\n          return headers[key];\n        }\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents(xhr, request) {\n      var progressSubscriber = request.progressSubscriber;\n\n      function xhrTimeout(e) {\n        var subscriber = xhrTimeout.subscriber,\n            progressSubscriber = xhrTimeout.progressSubscriber,\n            request = xhrTimeout.request;\n\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n\n        var error;\n\n        try {\n          error = new AjaxTimeoutError(this, request);\n        } catch (err) {\n          error = err;\n        }\n\n        subscriber.error(error);\n      }\n\n      xhr.ontimeout = xhrTimeout;\n      xhrTimeout.request = request;\n      xhrTimeout.subscriber = this;\n      xhrTimeout.progressSubscriber = progressSubscriber;\n\n      if (xhr.upload && 'withCredentials' in xhr) {\n        if (progressSubscriber) {\n          var _xhrProgress2;\n\n          _xhrProgress2 = function xhrProgress(e) {\n            var _xhrProgress = _xhrProgress2,\n                progressSubscriber = _xhrProgress.progressSubscriber;\n            progressSubscriber.next(e);\n          };\n\n          if (root.XDomainRequest) {\n            xhr.onprogress = _xhrProgress2;\n          } else {\n            xhr.upload.onprogress = _xhrProgress2;\n          }\n\n          _xhrProgress2.progressSubscriber = progressSubscriber;\n        }\n\n        var _xhrError2;\n\n        _xhrError2 = function xhrError(e) {\n          var _xhrError = _xhrError2,\n              progressSubscriber = _xhrError.progressSubscriber,\n              subscriber = _xhrError.subscriber,\n              request = _xhrError.request;\n\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n\n          var error;\n\n          try {\n            error = new AjaxError('ajax error', this, request);\n          } catch (err) {\n            error = err;\n          }\n\n          subscriber.error(error);\n        };\n\n        xhr.onerror = _xhrError2;\n        _xhrError2.request = request;\n        _xhrError2.subscriber = this;\n        _xhrError2.progressSubscriber = progressSubscriber;\n      }\n\n      function xhrReadyStateChange(e) {\n        return;\n      }\n\n      xhr.onreadystatechange = xhrReadyStateChange;\n      xhrReadyStateChange.subscriber = this;\n      xhrReadyStateChange.progressSubscriber = progressSubscriber;\n      xhrReadyStateChange.request = request;\n\n      function xhrLoad(e) {\n        var subscriber = xhrLoad.subscriber,\n            progressSubscriber = xhrLoad.progressSubscriber,\n            request = xhrLoad.request;\n\n        if (this.readyState === 4) {\n          var status = this.status === 1223 ? 204 : this.status;\n          var response = this.responseType === 'text' ? this.response || this.responseText : this.response;\n\n          if (status === 0) {\n            status = response ? 200 : 0;\n          }\n\n          if (status < 400) {\n            if (progressSubscriber) {\n              progressSubscriber.complete();\n            }\n\n            subscriber.next(e);\n            subscriber.complete();\n          } else {\n            if (progressSubscriber) {\n              progressSubscriber.error(e);\n            }\n\n            var error;\n\n            try {\n              error = new AjaxError('ajax error ' + status, this, request);\n            } catch (err) {\n              error = err;\n            }\n\n            subscriber.error(error);\n          }\n        }\n      }\n\n      xhr.onload = xhrLoad;\n      xhrLoad.subscriber = this;\n      xhrLoad.progressSubscriber = progressSubscriber;\n      xhrLoad.request = request;\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var done = this.done,\n          xhr = this.xhr;\n\n      if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n        xhr.abort();\n      }\n\n      _get(_getPrototypeOf(AjaxSubscriber.prototype), \"unsubscribe\", this).call(this);\n    }\n  }]);\n\n  return AjaxSubscriber;\n}(Subscriber);\nexport var AjaxResponse = /*#__PURE__*/_createClass(function AjaxResponse(originalEvent, xhr, request) {\n  _classCallCheck(this, AjaxResponse);\n\n  this.originalEvent = originalEvent;\n  this.xhr = xhr;\n  this.request = request;\n  this.status = xhr.status;\n  this.responseType = xhr.responseType || request.responseType;\n  this.response = parseXhrResponse(this.responseType, xhr);\n});\n\nvar AjaxErrorImpl = /*@__PURE__*/function () {\n  function AjaxErrorImpl(message, xhr, request) {\n    Error.call(this);\n    this.message = message;\n    this.name = 'AjaxError';\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n    this.response = parseXhrResponse(this.responseType, xhr);\n    return this;\n  }\n\n  AjaxErrorImpl.prototype = Object.create(Error.prototype);\n  return AjaxErrorImpl;\n}();\n\nexport var AjaxError = AjaxErrorImpl;\n\nfunction parseJson(xhr) {\n  if ('response' in xhr) {\n    return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n  } else {\n    return JSON.parse(xhr.responseText || 'null');\n  }\n}\n\nfunction parseXhrResponse(responseType, xhr) {\n  switch (responseType) {\n    case 'json':\n      return parseJson(xhr);\n\n    case 'xml':\n      return xhr.responseXML;\n\n    case 'text':\n    default:\n      return 'response' in xhr ? xhr.response : xhr.responseText;\n  }\n}\n\nfunction AjaxTimeoutErrorImpl(xhr, request) {\n  AjaxError.call(this, 'ajax timeout', xhr, request);\n  this.name = 'AjaxTimeoutError';\n  return this;\n}\n\nexport var AjaxTimeoutError = AjaxTimeoutErrorImpl; //# sourceMappingURL=AjaxObservable.js.map","map":null,"metadata":{},"sourceType":"module"}